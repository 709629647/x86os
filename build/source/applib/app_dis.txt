In archive D:/mylinux/diy-x86os-master-20230506/start/start/build/source/applib/libapp.a:

crt0.S.obj:     file format elf32-i386
rw-rw-rw- 0/0   1380 Mar 25 18:09 2024 crt0.S.obj
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000010  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000044  2**0
                  ALLOC
  3 .debug_line   0000007a  00000000  00000000  00000044  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .debug_info   000000b1  00000000  00000000  000000be  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_abbrev 00000014  00000000  00000000  0000016f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  00000188  2**3
                  CONTENTS, RELOC, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 g       .text	00000000 _start
00000000         *UND*	00000000 cstart



Disassembly of section .text:

00000000 <_start>:
    .global _start
    .extern cstart
_start:
    # 设置各数据段的选择子,由于应用任务都是用tss恢复的，所以
    # 实际不必设置，但为安全起见，还是设置一下
    mov %ss, %ax
   0:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
   3:	8e d8                	mov    %eax,%ds
    mov %ax, %es
   5:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   7:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   9:	8e e8                	mov    %eax,%gs

    # 进入主函数执行，注意此时栈没有变，参数仍然在其中
    # 所以调用cstart时，仍然可以看到参数
    jmp cstart
   b:	e9 fc ff ff ff       	jmp    c <_start+0xc>
			c: R_386_PC32	cstart

cstart.c.obj:     file format elf32-i386
rw-rw-rw- 0/0   7444 Mar 25 18:09 2024 cstart.c.obj
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000003e  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000072  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000072  2**0
                  ALLOC
  3 .debug_info   00000945  00000000  00000000  00000072  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .debug_abbrev 000001cc  00000000  00000000  000009b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000b83  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_line   000001cc  00000000  00000000  00000ba3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  7 .debug_str    000005d4  00000000  00000000  00000d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .comment      00000012  00000000  00000000  00001343  2**0
                  CONTENTS, READONLY
  9 .debug_frame  0000002c  00000000  00000000  00001358  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 cstart.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .comment	00000000 .comment
00000000 g     F .text	0000003e cstart
00000000         *UND*	00000000 s_bss
00000000         *UND*	00000000 e_bss
00000000         *UND*	00000000 main
00000000         *UND*	00000000 exit



Disassembly of section .text:

00000000 <cstart>:
#include <stdlib.h>
int main(int argc, char** argv);

extern uint8_t s_bss[], e_bss[];
void cstart(int argc, char** argv)
{
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	83 ec 18             	sub    $0x18,%esp
    
    uint8_t * start = s_bss;
   6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			9: R_386_32	s_bss
    while (start < e_bss) {
   d:	eb 0c                	jmp    1b <cstart+0x1b>
        *start++ = 0;
   f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  12:	8d 50 01             	lea    0x1(%eax),%edx
  15:	89 55 f4             	mov    %edx,-0xc(%ebp)
  18:	c6 00 00             	movb   $0x0,(%eax)
    while (start < e_bss) {
  1b:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
			1e: R_386_32	e_bss
  22:	72 eb                	jb     f <cstart+0xf>
    }

    exit(main(argc, argv));
  24:	83 ec 08             	sub    $0x8,%esp
  27:	ff 75 0c             	pushl  0xc(%ebp)
  2a:	ff 75 08             	pushl  0x8(%ebp)
  2d:	e8 fc ff ff ff       	call   2e <cstart+0x2e>
			2e: R_386_PC32	main
  32:	83 c4 10             	add    $0x10,%esp
  35:	83 ec 0c             	sub    $0xc,%esp
  38:	50                   	push   %eax
  39:	e8 fc ff ff ff       	call   3a <cstart+0x3a>
			3a: R_386_PC32	exit

lib_syscall.c.obj:     file format elf32-i386
rw-rw-rw- 0/0  14240 Mar 25 18:09 2024 lib_syscall.c.obj
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f3  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000427  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000427  2**0
                  ALLOC
  3 .debug_info   00001185  00000000  00000000  00000427  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .debug_abbrev 0000029c  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00001848  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_line   00000316  00000000  00000000  00001868  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  7 .debug_str    00000814  00000000  00000000  00001b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .comment      00000012  00000000  00000000  00002392  2**0
                  CONTENTS, READONLY
  9 .debug_frame  00000300  00000000  00000000  000023a4  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 lib_syscall.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l     F .text	0000004c sys_call
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .comment	00000000 .comment
0000004c g     F .text	0000002a sleep
00000076 g     F .text	0000001b getpid
00000091 g     F .text	00000028 mprint_msg
000000b9 g     F .text	0000001c fork
000000d5 g     F .text	0000001c yield
000000f1 g     F .text	0000002e execve
0000011f g     F .text	00000028 open
00000147 g     F .text	0000002e read
00000175 g     F .text	0000002e write
000001a3 g     F .text	0000002e lseek
000001d1 g     F .text	00000022 close
000001f3 g     F .text	00000027 fstat
0000021a g     F .text	00000021 unlink
0000023b g     F .text	00000021 isatty
0000025c g     F .text	00000021 sbrk
0000027d g     F .text	00000021 dup
0000029e g     F .text	00000022 _exit
000002c0 g     F .text	00000021 wait
000002e1 g     F .text	0000006b opendir
00000000         *UND*	00000000 malloc
00000000         *UND*	00000000 free
0000034c g     F .text	00000040 readdir
0000038c g     F .text	00000033 ioctl
000003bf g     F .text	00000034 closedir



Disassembly of section .text:

00000000 <sys_call>:
    uint32_t arg2;
    uint32_t arg3;
}sys_arg_t;

static inline int sys_call(sys_arg_t* args)
{
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	57                   	push   %edi
   4:	56                   	push   %esi
   5:	53                   	push   %ebx
   6:	83 ec 10             	sub    $0x10,%esp
	uint32_t addr[] = {0, SYSTEM_SELECTOR | 0};
   9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  10:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg2]\n\t"
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[a])":"=a"(ret)
        :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2),
  17:	8b 45 08             	mov    0x8(%ebp),%eax
  1a:	8b 40 10             	mov    0x10(%eax),%eax
  1d:	8b 55 08             	mov    0x8(%ebp),%edx
  20:	8b 52 0c             	mov    0xc(%edx),%edx
        [arg1]"r"(args->arg1),[arg0]"r"(args->arg0),[id]"r"(args->id),[a]"r"(addr));
  23:	8b 4d 08             	mov    0x8(%ebp),%ecx
  26:	8b 49 08             	mov    0x8(%ecx),%ecx
  29:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2c:	8b 5b 04             	mov    0x4(%ebx),%ebx
  2f:	8b 75 08             	mov    0x8(%ebp),%esi
  32:	8b 36                	mov    (%esi),%esi
	__asm__ __volatile__(
  34:	8d 7d e8             	lea    -0x18(%ebp),%edi
  37:	50                   	push   %eax
  38:	52                   	push   %edx
  39:	51                   	push   %ecx
  3a:	53                   	push   %ebx
  3b:	56                   	push   %esi
  3c:	ff 1f                	lcall  *(%edi)
  3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return ret;
  41:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  44:	83 c4 10             	add    $0x10,%esp
  47:	5b                   	pop    %ebx
  48:	5e                   	pop    %esi
  49:	5f                   	pop    %edi
  4a:	5d                   	pop    %ebp
  4b:	c3                   	ret    

0000004c <sleep>:
#include "lib_syscall.h"

void sleep (int ms)
{
  4c:	55                   	push   %ebp
  4d:	89 e5                	mov    %esp,%ebp
  4f:	83 ec 20             	sub    $0x20,%esp
    if(ms < 0)
  52:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  56:	78 1b                	js     73 <sleep+0x27>
        return;
    sys_arg_t args;
    args.id = SYS_SLEEP;
  58:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
  5f:	8b 45 08             	mov    0x8(%ebp),%eax
  62:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
  65:	8d 45 ec             	lea    -0x14(%ebp),%eax
  68:	50                   	push   %eax
  69:	e8 92 ff ff ff       	call   0 <sys_call>
  6e:	83 c4 04             	add    $0x4,%esp
  71:	eb 01                	jmp    74 <sleep+0x28>
        return;
  73:	90                   	nop
}
  74:	c9                   	leave  
  75:	c3                   	ret    

00000076 <getpid>:

uint32_t getpid(void)
{
  76:	55                   	push   %ebp
  77:	89 e5                	mov    %esp,%ebp
  79:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_GETPID;
  7c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
  83:	8d 45 ec             	lea    -0x14(%ebp),%eax
  86:	50                   	push   %eax
  87:	e8 74 ff ff ff       	call   0 <sys_call>
  8c:	83 c4 04             	add    $0x4,%esp
}
  8f:	c9                   	leave  
  90:	c3                   	ret    

00000091 <mprint_msg>:

void mprint_msg(char* fmt, int value)
{
  91:	55                   	push   %ebp
  92:	89 e5                	mov    %esp,%ebp
  94:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_PRINTMSG;
  97:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (uint32_t)fmt;
  9e:	8b 45 08             	mov    0x8(%ebp),%eax
  a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (uint32_t)value;
  a4:	8b 45 0c             	mov    0xc(%ebp),%eax
  a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    sys_call(&args);
  aa:	8d 45 ec             	lea    -0x14(%ebp),%eax
  ad:	50                   	push   %eax
  ae:	e8 4d ff ff ff       	call   0 <sys_call>
  b3:	83 c4 04             	add    $0x4,%esp
}
  b6:	90                   	nop
  b7:	c9                   	leave  
  b8:	c3                   	ret    

000000b9 <fork>:

int fork(void)
{
  b9:	55                   	push   %ebp
  ba:	89 e5                	mov    %esp,%ebp
  bc:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_FORK;
  bf:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    sys_call(&args);
  c6:	8d 45 ec             	lea    -0x14(%ebp),%eax
  c9:	50                   	push   %eax
  ca:	e8 31 ff ff ff       	call   0 <sys_call>
  cf:	83 c4 04             	add    $0x4,%esp
}
  d2:	90                   	nop
  d3:	c9                   	leave  
  d4:	c3                   	ret    

000000d5 <yield>:

int yield(void)
{
  d5:	55                   	push   %ebp
  d6:	89 e5                	mov    %esp,%ebp
  d8:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_YIELD;
  db:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    sys_call(&args);
  e2:	8d 45 ec             	lea    -0x14(%ebp),%eax
  e5:	50                   	push   %eax
  e6:	e8 15 ff ff ff       	call   0 <sys_call>
  eb:	83 c4 04             	add    $0x4,%esp
}
  ee:	90                   	nop
  ef:	c9                   	leave  
  f0:	c3                   	ret    

000000f1 <execve>:

int execve(const char*name , char* const* argv, char* const* env)
{
  f1:	55                   	push   %ebp
  f2:	89 e5                	mov    %esp,%ebp
  f4:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_EXECVE;
  f7:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
  fe:	8b 45 08             	mov    0x8(%ebp),%eax
 101:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
 104:	8b 45 0c             	mov    0xc(%ebp),%eax
 107:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
 10a:	8b 45 10             	mov    0x10(%ebp),%eax
 10d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    sys_call(&args);
 110:	8d 45 ec             	lea    -0x14(%ebp),%eax
 113:	50                   	push   %eax
 114:	e8 e7 fe ff ff       	call   0 <sys_call>
 119:	83 c4 04             	add    $0x4,%esp
}
 11c:	90                   	nop
 11d:	c9                   	leave  
 11e:	c3                   	ret    

0000011f <open>:

int open(const char* name, int flag, ...)
{
 11f:	55                   	push   %ebp
 120:	89 e5                	mov    %esp,%ebp
 122:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_OPEN;
 125:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
 12c:	8b 45 08             	mov    0x8(%ebp),%eax
 12f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = flag;
 132:	8b 45 0c             	mov    0xc(%ebp),%eax
 135:	89 45 f4             	mov    %eax,-0xc(%ebp)
    sys_call(&args);
 138:	8d 45 ec             	lea    -0x14(%ebp),%eax
 13b:	50                   	push   %eax
 13c:	e8 bf fe ff ff       	call   0 <sys_call>
 141:	83 c4 04             	add    $0x4,%esp
}
 144:	90                   	nop
 145:	c9                   	leave  
 146:	c3                   	ret    

00000147 <read>:
int read(int fd, char* buf, int size)
{
 147:	55                   	push   %ebp
 148:	89 e5                	mov    %esp,%ebp
 14a:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_READ;
 14d:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = fd;
 154:	8b 45 08             	mov    0x8(%ebp),%eax
 157:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)buf;
 15a:	8b 45 0c             	mov    0xc(%ebp),%eax
 15d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = size;
 160:	8b 45 10             	mov    0x10(%ebp),%eax
 163:	89 45 f8             	mov    %eax,-0x8(%ebp)
    sys_call(&args);
 166:	8d 45 ec             	lea    -0x14(%ebp),%eax
 169:	50                   	push   %eax
 16a:	e8 91 fe ff ff       	call   0 <sys_call>
 16f:	83 c4 04             	add    $0x4,%esp
}
 172:	90                   	nop
 173:	c9                   	leave  
 174:	c3                   	ret    

00000175 <write>:
int write(int fd, char* buf, int size)
{
 175:	55                   	push   %ebp
 176:	89 e5                	mov    %esp,%ebp
 178:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_WRITE;
 17b:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = fd;
 182:	8b 45 08             	mov    0x8(%ebp),%eax
 185:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)buf;
 188:	8b 45 0c             	mov    0xc(%ebp),%eax
 18b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = size;
 18e:	8b 45 10             	mov    0x10(%ebp),%eax
 191:	89 45 f8             	mov    %eax,-0x8(%ebp)
    sys_call(&args);
 194:	8d 45 ec             	lea    -0x14(%ebp),%eax
 197:	50                   	push   %eax
 198:	e8 63 fe ff ff       	call   0 <sys_call>
 19d:	83 c4 04             	add    $0x4,%esp
}
 1a0:	90                   	nop
 1a1:	c9                   	leave  
 1a2:	c3                   	ret    

000001a3 <lseek>:
int lseek(int fd, int ptr, int dir)
{
 1a3:	55                   	push   %ebp
 1a4:	89 e5                	mov    %esp,%ebp
 1a6:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_LSEEK;
 1a9:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = fd;
 1b0:	8b 45 08             	mov    0x8(%ebp),%eax
 1b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = ptr;
 1b6:	8b 45 0c             	mov    0xc(%ebp),%eax
 1b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
 1bc:	8b 45 10             	mov    0x10(%ebp),%eax
 1bf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    sys_call(&args);
 1c2:	8d 45 ec             	lea    -0x14(%ebp),%eax
 1c5:	50                   	push   %eax
 1c6:	e8 35 fe ff ff       	call   0 <sys_call>
 1cb:	83 c4 04             	add    $0x4,%esp
}
 1ce:	90                   	nop
 1cf:	c9                   	leave  
 1d0:	c3                   	ret    

000001d1 <close>:
int close(int fd)
{
 1d1:	55                   	push   %ebp
 1d2:	89 e5                	mov    %esp,%ebp
 1d4:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_CLOSE;
 1d7:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = fd;
 1de:	8b 45 08             	mov    0x8(%ebp),%eax
 1e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
 1e4:	8d 45 ec             	lea    -0x14(%ebp),%eax
 1e7:	50                   	push   %eax
 1e8:	e8 13 fe ff ff       	call   0 <sys_call>
 1ed:	83 c4 04             	add    $0x4,%esp
}
 1f0:	90                   	nop
 1f1:	c9                   	leave  
 1f2:	c3                   	ret    

000001f3 <fstat>:

int fstat(int file, struct stat *st) {
 1f3:	55                   	push   %ebp
 1f4:	89 e5                	mov    %esp,%ebp
 1f6:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_FSTAT;
 1f9:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
 200:	8b 45 08             	mov    0x8(%ebp),%eax
 203:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
 206:	8b 45 0c             	mov    0xc(%ebp),%eax
 209:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
 20c:	8d 45 ec             	lea    -0x14(%ebp),%eax
 20f:	50                   	push   %eax
 210:	e8 eb fd ff ff       	call   0 <sys_call>
 215:	83 c4 04             	add    $0x4,%esp
}
 218:	c9                   	leave  
 219:	c3                   	ret    

0000021a <unlink>:
int unlink(const char* path)
{
 21a:	55                   	push   %ebp
 21b:	89 e5                	mov    %esp,%ebp
 21d:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_UNLINK;
 220:	c7 45 ec 3c 00 00 00 	movl   $0x3c,-0x14(%ebp)
    args.arg0 = (int)path;
 227:	8b 45 08             	mov    0x8(%ebp),%eax
 22a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
 22d:	8d 45 ec             	lea    -0x14(%ebp),%eax
 230:	50                   	push   %eax
 231:	e8 ca fd ff ff       	call   0 <sys_call>
 236:	83 c4 04             	add    $0x4,%esp
}
 239:	c9                   	leave  
 23a:	c3                   	ret    

0000023b <isatty>:
int isatty(int file) {
 23b:	55                   	push   %ebp
 23c:	89 e5                	mov    %esp,%ebp
 23e:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_ISATTY;
 241:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)file;
 248:	8b 45 08             	mov    0x8(%ebp),%eax
 24b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
 24e:	8d 45 ec             	lea    -0x14(%ebp),%eax
 251:	50                   	push   %eax
 252:	e8 a9 fd ff ff       	call   0 <sys_call>
 257:	83 c4 04             	add    $0x4,%esp
}
 25a:	c9                   	leave  
 25b:	c3                   	ret    

0000025c <sbrk>:

void * sbrk(ptrdiff_t incr) {
 25c:	55                   	push   %ebp
 25d:	89 e5                	mov    %esp,%ebp
 25f:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_SBRK;
 262:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)incr;
 269:	8b 45 08             	mov    0x8(%ebp),%eax
 26c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
 26f:	8d 45 ec             	lea    -0x14(%ebp),%eax
 272:	50                   	push   %eax
 273:	e8 88 fd ff ff       	call   0 <sys_call>
 278:	83 c4 04             	add    $0x4,%esp
}
 27b:	c9                   	leave  
 27c:	c3                   	ret    

0000027d <dup>:

int dup(int file) {
 27d:	55                   	push   %ebp
 27e:	89 e5                	mov    %esp,%ebp
 280:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_DUP;
 283:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = (int)file;
 28a:	8b 45 08             	mov    0x8(%ebp),%eax
 28d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
 290:	8d 45 ec             	lea    -0x14(%ebp),%eax
 293:	50                   	push   %eax
 294:	e8 67 fd ff ff       	call   0 <sys_call>
 299:	83 c4 04             	add    $0x4,%esp
}
 29c:	c9                   	leave  
 29d:	c3                   	ret    

0000029e <_exit>:

void _exit(int status)
{
 29e:	55                   	push   %ebp
 29f:	89 e5                	mov    %esp,%ebp
 2a1:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_EXIT;
 2a4:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = status;
 2ab:	8b 45 08             	mov    0x8(%ebp),%eax
 2ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
 2b1:	8d 45 ec             	lea    -0x14(%ebp),%eax
 2b4:	50                   	push   %eax
 2b5:	e8 46 fd ff ff       	call   0 <sys_call>
 2ba:	83 c4 04             	add    $0x4,%esp
}
 2bd:	90                   	nop
 2be:	c9                   	leave  
 2bf:	c3                   	ret    

000002c0 <wait>:

int wait(int* status)
{
 2c0:	55                   	push   %ebp
 2c1:	89 e5                	mov    %esp,%ebp
 2c3:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_WAIT;
 2c6:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
 2cd:	8b 45 08             	mov    0x8(%ebp),%eax
 2d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
 2d3:	8d 45 ec             	lea    -0x14(%ebp),%eax
 2d6:	50                   	push   %eax
 2d7:	e8 24 fd ff ff       	call   0 <sys_call>
 2dc:	83 c4 04             	add    $0x4,%esp
}
 2df:	c9                   	leave  
 2e0:	c3                   	ret    

000002e1 <opendir>:



DIR* opendir(const char* path)
{
 2e1:	55                   	push   %ebp
 2e2:	89 e5                	mov    %esp,%ebp
 2e4:	83 ec 28             	sub    $0x28,%esp
    DIR* dir = (DIR*)malloc(sizeof(DIR));
 2e7:	83 ec 0c             	sub    $0xc,%esp
 2ea:	68 10 01 00 00       	push   $0x110
 2ef:	e8 fc ff ff ff       	call   2f0 <opendir+0xf>
			2f0: R_386_PC32	malloc
 2f4:	83 c4 10             	add    $0x10,%esp
 2f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(dir == (DIR*)0)
 2fa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 2fe:	75 07                	jne    307 <opendir+0x26>
    {
        return (DIR*)0;
 300:	b8 00 00 00 00       	mov    $0x0,%eax
 305:	eb 43                	jmp    34a <opendir+0x69>
    }
    sys_arg_t args;
    args.id = SYS_OPENDIR;
 307:	c7 45 dc 3d 00 00 00 	movl   $0x3d,-0x24(%ebp)
    args.arg0 = (int)path;
 30e:	8b 45 08             	mov    0x8(%ebp),%eax
 311:	89 45 e0             	mov    %eax,-0x20(%ebp)
    args.arg1 = (int)dir;
 314:	8b 45 f4             	mov    -0xc(%ebp),%eax
 317:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int err = sys_call(&args);
 31a:	83 ec 0c             	sub    $0xc,%esp
 31d:	8d 45 dc             	lea    -0x24(%ebp),%eax
 320:	50                   	push   %eax
 321:	e8 da fc ff ff       	call   0 <sys_call>
 326:	83 c4 10             	add    $0x10,%esp
 329:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(err < 0)
 32c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
 330:	79 15                	jns    347 <opendir+0x66>
    {
        free(dir);
 332:	83 ec 0c             	sub    $0xc,%esp
 335:	ff 75 f4             	pushl  -0xc(%ebp)
 338:	e8 fc ff ff ff       	call   339 <opendir+0x58>
			339: R_386_PC32	free
 33d:	83 c4 10             	add    $0x10,%esp
        return (DIR*)0;
 340:	b8 00 00 00 00       	mov    $0x0,%eax
 345:	eb 03                	jmp    34a <opendir+0x69>
    }
    return dir;
 347:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 34a:	c9                   	leave  
 34b:	c3                   	ret    

0000034c <readdir>:

struct dirent* readdir(DIR* dir)
{
 34c:	55                   	push   %ebp
 34d:	89 e5                	mov    %esp,%ebp
 34f:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_READDIR;
 352:	c7 45 e8 3e 00 00 00 	movl   $0x3e,-0x18(%ebp)
    args.arg0 = (int)dir;
 359:	8b 45 08             	mov    0x8(%ebp),%eax
 35c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    args.arg1 = (int)&dir->dirent;
 35f:	8b 45 08             	mov    0x8(%ebp),%eax
 362:	83 c0 04             	add    $0x4,%eax
 365:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = sys_call(&args);
 368:	8d 45 e8             	lea    -0x18(%ebp),%eax
 36b:	50                   	push   %eax
 36c:	e8 8f fc ff ff       	call   0 <sys_call>
 371:	83 c4 04             	add    $0x4,%esp
 374:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(err < 0)
 377:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
 37b:	79 07                	jns    384 <readdir+0x38>
    {
        return (struct dirent*)0;
 37d:	b8 00 00 00 00       	mov    $0x0,%eax
 382:	eb 06                	jmp    38a <readdir+0x3e>
    }
    return &dir->dirent;
 384:	8b 45 08             	mov    0x8(%ebp),%eax
 387:	83 c0 04             	add    $0x4,%eax
}
 38a:	c9                   	leave  
 38b:	c3                   	ret    

0000038c <ioctl>:

int ioctl(int file, int cmd, int arg0, int arg1) {
 38c:	55                   	push   %ebp
 38d:	89 e5                	mov    %esp,%ebp
 38f:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_IOCTL;
 392:	c7 45 ec 3b 00 00 00 	movl   $0x3b,-0x14(%ebp)
    args.arg0 = file;
 399:	8b 45 08             	mov    0x8(%ebp),%eax
 39c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = cmd;
 39f:	8b 45 0c             	mov    0xc(%ebp),%eax
 3a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = arg0;
 3a5:	8b 45 10             	mov    0x10(%ebp),%eax
 3a8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    args.arg3 = arg1;
 3ab:	8b 45 14             	mov    0x14(%ebp),%eax
 3ae:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return sys_call(&args);
 3b1:	8d 45 ec             	lea    -0x14(%ebp),%eax
 3b4:	50                   	push   %eax
 3b5:	e8 46 fc ff ff       	call   0 <sys_call>
 3ba:	83 c4 04             	add    $0x4,%esp
}
 3bd:	c9                   	leave  
 3be:	c3                   	ret    

000003bf <closedir>:

int closedir(DIR* dir)
{
 3bf:	55                   	push   %ebp
 3c0:	89 e5                	mov    %esp,%ebp
 3c2:	83 ec 28             	sub    $0x28,%esp
    sys_arg_t args;
    args.id = SYS_CLOSEDIR;
 3c5:	c7 45 e4 3f 00 00 00 	movl   $0x3f,-0x1c(%ebp)
    args.arg0 = (int)dir;
 3cc:	8b 45 08             	mov    0x8(%ebp),%eax
 3cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
    sys_call(&args);
 3d2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
 3d5:	50                   	push   %eax
 3d6:	e8 25 fc ff ff       	call   0 <sys_call>
 3db:	83 c4 04             	add    $0x4,%esp
    free(dir);
 3de:	83 ec 0c             	sub    $0xc,%esp
 3e1:	ff 75 08             	pushl  0x8(%ebp)
 3e4:	e8 fc ff ff ff       	call   3e5 <closedir+0x26>
			3e5: R_386_PC32	free
 3e9:	83 c4 10             	add    $0x10,%esp
    return 0;
 3ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
 3f1:	c9                   	leave  
 3f2:	c3                   	ret    
