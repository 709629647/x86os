
D:/mylinux/diy-x86os-master-20230506/start/start/build/source/boot/boot.elf:     file format elf32-i386
D:/mylinux/diy-x86os-master-20230506/start/start/build/source/boot/boot.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00000c45 memsz 0x00000c45 flags r-x
    LOAD off    0x00000dfe vaddr 0x00007dfe paddr 0x00007dfe align 2**12
         filesz 0x00000002 memsz 0x00000002 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000045  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 boot_end      00000002  00007dfe  00007dfe  00000dfe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000e5  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000040  00000000  00000000  00000f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000fb  00000000  00000000  00000f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000010a  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00007dfe l    d  boot_end	00000000 boot_end
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 CMakeFiles/boot.dir/start.S.obj
00007c17 l       .text	00000000 read_loader
00007dfe l       boot_end	00000000 boot_sig
00000000 l    df *ABS*	00000000 boot.c
00007c2e g     F .text	00000017 boot_entry
00007c00 g       .text	00000000 _start
00008c45 g       .text	00000000 __bss_start
00008c45 g       .text	00000000 _edata
00008c48 g       .text	00000000 _end



Disassembly of section .text:

00007c00 <_start>:
  	// 16位代码，务必加上
  	.code16
 	.text
	.global _start
	.extern boot_entry
_start:	mov $0, %ax
    7c00:	b8 00 00             	mov    $0x0,%ax
	mov %ax, %ds
    7c03:	8e d8                	mov    %ax,%ds
	mov %ax, %es
    7c05:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    7c07:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    7c09:	8e e8                	mov    %ax,%gs
	mov $_start, %esp //把栈指针初始化为0x7c00
    7c0b:	66 bc 00 7c 00 00    	mov    $0x7c00,%esp

	mov $0xe, %ah
    7c11:	b4 0e                	mov    $0xe,%ah
	mov $'L', %al
    7c13:	b0 4c                	mov    $0x4c,%al
	int $0x10
    7c15:	cd 10                	int    $0x10

00007c17 <read_loader>:


read_loader:
	mov $0x8000, %bx
    7c17:	bb 00 80             	mov    $0x8000,%bx
	mov $0x2, %ah
    7c1a:	b4 02                	mov    $0x2,%ah
	mov $0x2, %cx
    7c1c:	b9 02 00             	mov    $0x2,%cx
	mov $64, %al
    7c1f:	b0 40                	mov    $0x40,%al
	mov $0, %dh
    7c21:	b6 00                	mov    $0x0,%dh
	mov $0x80, %dl
    7c23:	b2 80                	mov    $0x80,%dl

	int $0x13	
    7c25:	cd 13                	int    $0x13
	jc read_loader //CF =0表示操作成功，这句话会检查CF的值，
    7c27:	72 ee                	jb     7c17 <read_loader>
	//若CF不为0会跳转到read_loader
	jmp boot_entry
    7c29:	e9 02 00             	jmp    7c2e <boot_entry>
	jmp .
    7c2c:	eb fe                	jmp    7c2c <read_loader+0x15>

00007c2e <boot_entry>:
#define LOADER_START_ADDR 0x8000
/**
 * Boot的C入口函数
 * 只完成一项功能，即从磁盘找到loader文件然后加载到内容中，并跳转过去
 */
void boot_entry(void) {
    7c2e:	66 55                	push   %ebp
    7c30:	66 89 e5             	mov    %esp,%ebp
    7c33:	66 83 ec 08          	sub    $0x8,%esp
    ((void(*)(void))LOADER_START_ADDR)();
    7c37:	66 b8 00 80 00 00    	mov    $0x8000,%eax
    7c3d:	66 ff d0             	calll  *%eax
} 
    7c40:	90                   	nop
    7c41:	66 c9                	leavel 
    7c43:	66 c3                	retl   

Disassembly of section boot_end:

00007dfe <boot_sig>:
    7dfe:	55                   	push   %bp
    7dff:	aa                   	stos   %al,%es:(%di)
