
D:/mylinux/diy-x86os-master-20230506/start/start/build/source/init/init.elf:     file format elf32-i386
D:/mylinux/diy-x86os-master-20230506/start/start/build/source/init/init.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x83000000

Program Header:
    LOAD off    0x00001000 vaddr 0x83000000 paddr 0x83000000 align 2**12
         filesz 0x00002030 memsz 0x00002660 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017cc  83000000  83000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000004  830017cc  830017cc  000027cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000850  830017e0  830017e0  000027e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000620  83002040  83002040  00003030  2**5
                  ALLOC
  4 .debug_line   000013cf  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000080e5  00000000  00000000  000043ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001a3a  00000000  00000000  0000c4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000198  00000000  00000000  0000df20  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000caa  00000000  00000000  0000e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000023  00000000  00000000  0000ed62  2**0
                  CONTENTS, READONLY
 10 .debug_frame  000005ac  00000000  00000000  0000ed88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line_str 00000395  00000000  00000000  0000f334  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
83000000 l    d  .text	00000000 .text
830017cc l    d  .rodata	00000000 .rodata
830017e0 l    d  .data	00000000 .data
83002040 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 cstart.c
00000000 l    df *ABS*	00000000 lib_syscall.c
8300004e l     F .text	0000004c sys_call
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
830017e0 l     O .data	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
830004e3 l     F .text	00000293 malloc_extend_top
00000000 l    df *ABS*	00000000 mlock.c
83002088 l     O .bss	00000004 __malloc_recursive_mutex
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
8300208c l     O .bss	00000004 __atexit_recursive_mutex
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 reent.c
83001635 g     F .text	00000037 cleanup_glue
83000123 g     F .text	0000001c yield
830003da g     F .text	00000033 ioctl
83000f9e g     F .text	00000006 __malloc_unlock
830020a0 g     O .bss	000005c0 task_manager
83002090 g     O .bss	00000004 errno
8300013f g     F .text	0000002e execve
830000c4 g     F .text	0000001b getpid
83002030 g       .data	00000000 s_bss
830004aa g     F .text	0000001c malloc
83000289 g     F .text	00000021 isatty
8300009a g     F .text	0000002a sleep
83002040 g     O .bss	00000004 __malloc_top_pad
83000fa4 g     F .text	00000040 _sbrk_r
8300039a g     F .text	00000040 readdir
83002044 g     O .bss	00000004 __malloc_max_sbrked_mem
830001f1 g     F .text	0000002e lseek
830017cc g     O .rodata	00000004 _global_impure_ptr
8300166c g     F .text	00000160 _reclaim_reent
830001c3 g     F .text	0000002e write
83000241 g     F .text	00000027 fstat
830000df g     F .text	00000028 mprint_msg
830010f9 g     F .text	000003db _free_r
8300030e g     F .text	00000021 wait
83000fe4 g     F .text	00000115 __call_exitprocs
8300202c g     O .data	00000004 __malloc_sbrk_base
83000000 g       .text	00000000 _start
83000195 g     F .text	0000002e read
83002060 g     O .bss	00000028 __malloc_current_mallinfo
83000268 g     F .text	00000021 unlink
83000107 g     F .text	0000001c fork
83001c20 g     O .data	00000408 __malloc_av_
83000f98 g     F .text	00000006 __malloc_lock
830002aa g     F .text	00000021 sbrk
83000010 g     F .text	0000003e cstart
83000441 g     F .text	00000025 main
83002048 g     O .bss	00000004 __malloc_max_total_mem
83000776 g     F .text	00000822 _malloc_r
8300032f g     F .text	0000006b opendir
830014d4 g     F .text	00000161 _malloc_trim_r
830002cb g     F .text	00000021 dup
83001c04 g     O .data	00000004 _impure_ptr
83002028 g     O .data	00000004 __malloc_trim_threshold
83000466 g     F .text	00000044 exit
83002660 g       .bss	00000000 e_bss
830002ec g     F .text	00000022 _exit
8300016d g     F .text	00000028 open
8300040d g     F .text	00000034 closedir
8300021f g     F .text	00000022 close
830004c6 g     F .text	0000001d free



Disassembly of section .text:

83000000 <_start>:
    .global _start
    .extern cstart
_start:
    # 设置各数据段的选择子,由于应用任务都是用tss恢复的，所以
    # 实际不必设置，但为安全起见，还是设置一下
    mov %ss, %ax
83000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
83000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
83000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
83000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
83000009:	8e e8                	mov    %eax,%gs

    # 进入主函数执行，注意此时栈没有变，参数仍然在其中
    # 所以调用cstart时，仍然可以看到参数
    jmp cstart
8300000b:	e9 00 00 00 00       	jmp    83000010 <cstart>

83000010 <cstart>:
#include <stdlib.h>
int main(int argc, char** argv);

extern uint8_t s_bss[], e_bss[];
void cstart(int argc, char** argv)
{
83000010:	55                   	push   %ebp
83000011:	89 e5                	mov    %esp,%ebp
83000013:	83 ec 18             	sub    $0x18,%esp
    
    uint8_t * start = s_bss;
83000016:	c7 45 f4 30 20 00 83 	movl   $0x83002030,-0xc(%ebp)
    while (start < e_bss) {
8300001d:	eb 0c                	jmp    8300002b <cstart+0x1b>
        *start++ = 0;
8300001f:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000022:	8d 50 01             	lea    0x1(%eax),%edx
83000025:	89 55 f4             	mov    %edx,-0xc(%ebp)
83000028:	c6 00 00             	movb   $0x0,(%eax)
    while (start < e_bss) {
8300002b:	81 7d f4 60 26 00 83 	cmpl   $0x83002660,-0xc(%ebp)
83000032:	72 eb                	jb     8300001f <cstart+0xf>
    }

    exit(main(argc, argv));
83000034:	83 ec 08             	sub    $0x8,%esp
83000037:	ff 75 0c             	pushl  0xc(%ebp)
8300003a:	ff 75 08             	pushl  0x8(%ebp)
8300003d:	e8 ff 03 00 00       	call   83000441 <main>
83000042:	83 c4 10             	add    $0x10,%esp
83000045:	83 ec 0c             	sub    $0xc,%esp
83000048:	50                   	push   %eax
83000049:	e8 18 04 00 00       	call   83000466 <exit>

8300004e <sys_call>:
    uint32_t arg2;
    uint32_t arg3;
}sys_arg_t;

static inline int sys_call(sys_arg_t* args)
{
8300004e:	55                   	push   %ebp
8300004f:	89 e5                	mov    %esp,%ebp
83000051:	57                   	push   %edi
83000052:	56                   	push   %esi
83000053:	53                   	push   %ebx
83000054:	83 ec 10             	sub    $0x10,%esp
	uint32_t addr[] = {0, SYSTEM_SELECTOR | 0};
83000057:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
8300005e:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg2]\n\t"
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[a])":"=a"(ret)
        :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2),
83000065:	8b 45 08             	mov    0x8(%ebp),%eax
83000068:	8b 40 10             	mov    0x10(%eax),%eax
8300006b:	8b 55 08             	mov    0x8(%ebp),%edx
8300006e:	8b 52 0c             	mov    0xc(%edx),%edx
        [arg1]"r"(args->arg1),[arg0]"r"(args->arg0),[id]"r"(args->id),[a]"r"(addr));
83000071:	8b 4d 08             	mov    0x8(%ebp),%ecx
83000074:	8b 49 08             	mov    0x8(%ecx),%ecx
83000077:	8b 5d 08             	mov    0x8(%ebp),%ebx
8300007a:	8b 5b 04             	mov    0x4(%ebx),%ebx
8300007d:	8b 75 08             	mov    0x8(%ebp),%esi
83000080:	8b 36                	mov    (%esi),%esi
	__asm__ __volatile__(
83000082:	8d 7d e8             	lea    -0x18(%ebp),%edi
83000085:	50                   	push   %eax
83000086:	52                   	push   %edx
83000087:	51                   	push   %ecx
83000088:	53                   	push   %ebx
83000089:	56                   	push   %esi
8300008a:	ff 1f                	lcall  *(%edi)
8300008c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return ret;
8300008f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
83000092:	83 c4 10             	add    $0x10,%esp
83000095:	5b                   	pop    %ebx
83000096:	5e                   	pop    %esi
83000097:	5f                   	pop    %edi
83000098:	5d                   	pop    %ebp
83000099:	c3                   	ret    

8300009a <sleep>:
#include "lib_syscall.h"

void sleep (int ms)
{
8300009a:	55                   	push   %ebp
8300009b:	89 e5                	mov    %esp,%ebp
8300009d:	83 ec 20             	sub    $0x20,%esp
    if(ms < 0)
830000a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
830000a4:	78 1b                	js     830000c1 <sleep+0x27>
        return;
    sys_arg_t args;
    args.id = SYS_SLEEP;
830000a6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
830000ad:	8b 45 08             	mov    0x8(%ebp),%eax
830000b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
830000b3:	8d 45 ec             	lea    -0x14(%ebp),%eax
830000b6:	50                   	push   %eax
830000b7:	e8 92 ff ff ff       	call   8300004e <sys_call>
830000bc:	83 c4 04             	add    $0x4,%esp
830000bf:	eb 01                	jmp    830000c2 <sleep+0x28>
        return;
830000c1:	90                   	nop
}
830000c2:	c9                   	leave  
830000c3:	c3                   	ret    

830000c4 <getpid>:

uint32_t getpid(void)
{
830000c4:	55                   	push   %ebp
830000c5:	89 e5                	mov    %esp,%ebp
830000c7:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_GETPID;
830000ca:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
830000d1:	8d 45 ec             	lea    -0x14(%ebp),%eax
830000d4:	50                   	push   %eax
830000d5:	e8 74 ff ff ff       	call   8300004e <sys_call>
830000da:	83 c4 04             	add    $0x4,%esp
}
830000dd:	c9                   	leave  
830000de:	c3                   	ret    

830000df <mprint_msg>:

void mprint_msg(char* fmt, int value)
{
830000df:	55                   	push   %ebp
830000e0:	89 e5                	mov    %esp,%ebp
830000e2:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_PRINTMSG;
830000e5:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (uint32_t)fmt;
830000ec:	8b 45 08             	mov    0x8(%ebp),%eax
830000ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (uint32_t)value;
830000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
830000f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    sys_call(&args);
830000f8:	8d 45 ec             	lea    -0x14(%ebp),%eax
830000fb:	50                   	push   %eax
830000fc:	e8 4d ff ff ff       	call   8300004e <sys_call>
83000101:	83 c4 04             	add    $0x4,%esp
}
83000104:	90                   	nop
83000105:	c9                   	leave  
83000106:	c3                   	ret    

83000107 <fork>:

int fork(void)
{
83000107:	55                   	push   %ebp
83000108:	89 e5                	mov    %esp,%ebp
8300010a:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_FORK;
8300010d:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    sys_call(&args);
83000114:	8d 45 ec             	lea    -0x14(%ebp),%eax
83000117:	50                   	push   %eax
83000118:	e8 31 ff ff ff       	call   8300004e <sys_call>
8300011d:	83 c4 04             	add    $0x4,%esp
}
83000120:	90                   	nop
83000121:	c9                   	leave  
83000122:	c3                   	ret    

83000123 <yield>:

int yield(void)
{
83000123:	55                   	push   %ebp
83000124:	89 e5                	mov    %esp,%ebp
83000126:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_YIELD;
83000129:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    sys_call(&args);
83000130:	8d 45 ec             	lea    -0x14(%ebp),%eax
83000133:	50                   	push   %eax
83000134:	e8 15 ff ff ff       	call   8300004e <sys_call>
83000139:	83 c4 04             	add    $0x4,%esp
}
8300013c:	90                   	nop
8300013d:	c9                   	leave  
8300013e:	c3                   	ret    

8300013f <execve>:

int execve(const char*name , char* const* argv, char* const* env)
{
8300013f:	55                   	push   %ebp
83000140:	89 e5                	mov    %esp,%ebp
83000142:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_EXECVE;
83000145:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
8300014c:	8b 45 08             	mov    0x8(%ebp),%eax
8300014f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
83000152:	8b 45 0c             	mov    0xc(%ebp),%eax
83000155:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
83000158:	8b 45 10             	mov    0x10(%ebp),%eax
8300015b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    sys_call(&args);
8300015e:	8d 45 ec             	lea    -0x14(%ebp),%eax
83000161:	50                   	push   %eax
83000162:	e8 e7 fe ff ff       	call   8300004e <sys_call>
83000167:	83 c4 04             	add    $0x4,%esp
}
8300016a:	90                   	nop
8300016b:	c9                   	leave  
8300016c:	c3                   	ret    

8300016d <open>:

int open(const char* name, int flag, ...)
{
8300016d:	55                   	push   %ebp
8300016e:	89 e5                	mov    %esp,%ebp
83000170:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_OPEN;
83000173:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
8300017a:	8b 45 08             	mov    0x8(%ebp),%eax
8300017d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = flag;
83000180:	8b 45 0c             	mov    0xc(%ebp),%eax
83000183:	89 45 f4             	mov    %eax,-0xc(%ebp)
    sys_call(&args);
83000186:	8d 45 ec             	lea    -0x14(%ebp),%eax
83000189:	50                   	push   %eax
8300018a:	e8 bf fe ff ff       	call   8300004e <sys_call>
8300018f:	83 c4 04             	add    $0x4,%esp
}
83000192:	90                   	nop
83000193:	c9                   	leave  
83000194:	c3                   	ret    

83000195 <read>:
int read(int fd, char* buf, int size)
{
83000195:	55                   	push   %ebp
83000196:	89 e5                	mov    %esp,%ebp
83000198:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_READ;
8300019b:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = fd;
830001a2:	8b 45 08             	mov    0x8(%ebp),%eax
830001a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)buf;
830001a8:	8b 45 0c             	mov    0xc(%ebp),%eax
830001ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = size;
830001ae:	8b 45 10             	mov    0x10(%ebp),%eax
830001b1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    sys_call(&args);
830001b4:	8d 45 ec             	lea    -0x14(%ebp),%eax
830001b7:	50                   	push   %eax
830001b8:	e8 91 fe ff ff       	call   8300004e <sys_call>
830001bd:	83 c4 04             	add    $0x4,%esp
}
830001c0:	90                   	nop
830001c1:	c9                   	leave  
830001c2:	c3                   	ret    

830001c3 <write>:
int write(int fd, char* buf, int size)
{
830001c3:	55                   	push   %ebp
830001c4:	89 e5                	mov    %esp,%ebp
830001c6:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_WRITE;
830001c9:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = fd;
830001d0:	8b 45 08             	mov    0x8(%ebp),%eax
830001d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)buf;
830001d6:	8b 45 0c             	mov    0xc(%ebp),%eax
830001d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = size;
830001dc:	8b 45 10             	mov    0x10(%ebp),%eax
830001df:	89 45 f8             	mov    %eax,-0x8(%ebp)
    sys_call(&args);
830001e2:	8d 45 ec             	lea    -0x14(%ebp),%eax
830001e5:	50                   	push   %eax
830001e6:	e8 63 fe ff ff       	call   8300004e <sys_call>
830001eb:	83 c4 04             	add    $0x4,%esp
}
830001ee:	90                   	nop
830001ef:	c9                   	leave  
830001f0:	c3                   	ret    

830001f1 <lseek>:
int lseek(int fd, int ptr, int dir)
{
830001f1:	55                   	push   %ebp
830001f2:	89 e5                	mov    %esp,%ebp
830001f4:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_LSEEK;
830001f7:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = fd;
830001fe:	8b 45 08             	mov    0x8(%ebp),%eax
83000201:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = ptr;
83000204:	8b 45 0c             	mov    0xc(%ebp),%eax
83000207:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
8300020a:	8b 45 10             	mov    0x10(%ebp),%eax
8300020d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    sys_call(&args);
83000210:	8d 45 ec             	lea    -0x14(%ebp),%eax
83000213:	50                   	push   %eax
83000214:	e8 35 fe ff ff       	call   8300004e <sys_call>
83000219:	83 c4 04             	add    $0x4,%esp
}
8300021c:	90                   	nop
8300021d:	c9                   	leave  
8300021e:	c3                   	ret    

8300021f <close>:
int close(int fd)
{
8300021f:	55                   	push   %ebp
83000220:	89 e5                	mov    %esp,%ebp
83000222:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_CLOSE;
83000225:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = fd;
8300022c:	8b 45 08             	mov    0x8(%ebp),%eax
8300022f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
83000232:	8d 45 ec             	lea    -0x14(%ebp),%eax
83000235:	50                   	push   %eax
83000236:	e8 13 fe ff ff       	call   8300004e <sys_call>
8300023b:	83 c4 04             	add    $0x4,%esp
}
8300023e:	90                   	nop
8300023f:	c9                   	leave  
83000240:	c3                   	ret    

83000241 <fstat>:

int fstat(int file, struct stat *st) {
83000241:	55                   	push   %ebp
83000242:	89 e5                	mov    %esp,%ebp
83000244:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_FSTAT;
83000247:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
8300024e:	8b 45 08             	mov    0x8(%ebp),%eax
83000251:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
83000254:	8b 45 0c             	mov    0xc(%ebp),%eax
83000257:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
8300025a:	8d 45 ec             	lea    -0x14(%ebp),%eax
8300025d:	50                   	push   %eax
8300025e:	e8 eb fd ff ff       	call   8300004e <sys_call>
83000263:	83 c4 04             	add    $0x4,%esp
}
83000266:	c9                   	leave  
83000267:	c3                   	ret    

83000268 <unlink>:
int unlink(const char* path)
{
83000268:	55                   	push   %ebp
83000269:	89 e5                	mov    %esp,%ebp
8300026b:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_UNLINK;
8300026e:	c7 45 ec 3c 00 00 00 	movl   $0x3c,-0x14(%ebp)
    args.arg0 = (int)path;
83000275:	8b 45 08             	mov    0x8(%ebp),%eax
83000278:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
8300027b:	8d 45 ec             	lea    -0x14(%ebp),%eax
8300027e:	50                   	push   %eax
8300027f:	e8 ca fd ff ff       	call   8300004e <sys_call>
83000284:	83 c4 04             	add    $0x4,%esp
}
83000287:	c9                   	leave  
83000288:	c3                   	ret    

83000289 <isatty>:
int isatty(int file) {
83000289:	55                   	push   %ebp
8300028a:	89 e5                	mov    %esp,%ebp
8300028c:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_ISATTY;
8300028f:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)file;
83000296:	8b 45 08             	mov    0x8(%ebp),%eax
83000299:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
8300029c:	8d 45 ec             	lea    -0x14(%ebp),%eax
8300029f:	50                   	push   %eax
830002a0:	e8 a9 fd ff ff       	call   8300004e <sys_call>
830002a5:	83 c4 04             	add    $0x4,%esp
}
830002a8:	c9                   	leave  
830002a9:	c3                   	ret    

830002aa <sbrk>:

void * sbrk(ptrdiff_t incr) {
830002aa:	55                   	push   %ebp
830002ab:	89 e5                	mov    %esp,%ebp
830002ad:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_SBRK;
830002b0:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)incr;
830002b7:	8b 45 08             	mov    0x8(%ebp),%eax
830002ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
830002bd:	8d 45 ec             	lea    -0x14(%ebp),%eax
830002c0:	50                   	push   %eax
830002c1:	e8 88 fd ff ff       	call   8300004e <sys_call>
830002c6:	83 c4 04             	add    $0x4,%esp
}
830002c9:	c9                   	leave  
830002ca:	c3                   	ret    

830002cb <dup>:

int dup(int file) {
830002cb:	55                   	push   %ebp
830002cc:	89 e5                	mov    %esp,%ebp
830002ce:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_DUP;
830002d1:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = (int)file;
830002d8:	8b 45 08             	mov    0x8(%ebp),%eax
830002db:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
830002de:	8d 45 ec             	lea    -0x14(%ebp),%eax
830002e1:	50                   	push   %eax
830002e2:	e8 67 fd ff ff       	call   8300004e <sys_call>
830002e7:	83 c4 04             	add    $0x4,%esp
}
830002ea:	c9                   	leave  
830002eb:	c3                   	ret    

830002ec <_exit>:

void _exit(int status)
{
830002ec:	55                   	push   %ebp
830002ed:	89 e5                	mov    %esp,%ebp
830002ef:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_EXIT;
830002f2:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = status;
830002f9:	8b 45 08             	mov    0x8(%ebp),%eax
830002fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
830002ff:	8d 45 ec             	lea    -0x14(%ebp),%eax
83000302:	50                   	push   %eax
83000303:	e8 46 fd ff ff       	call   8300004e <sys_call>
83000308:	83 c4 04             	add    $0x4,%esp
}
8300030b:	90                   	nop
8300030c:	c9                   	leave  
8300030d:	c3                   	ret    

8300030e <wait>:

int wait(int* status)
{
8300030e:	55                   	push   %ebp
8300030f:	89 e5                	mov    %esp,%ebp
83000311:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_WAIT;
83000314:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
8300031b:	8b 45 08             	mov    0x8(%ebp),%eax
8300031e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
83000321:	8d 45 ec             	lea    -0x14(%ebp),%eax
83000324:	50                   	push   %eax
83000325:	e8 24 fd ff ff       	call   8300004e <sys_call>
8300032a:	83 c4 04             	add    $0x4,%esp
}
8300032d:	c9                   	leave  
8300032e:	c3                   	ret    

8300032f <opendir>:



DIR* opendir(const char* path)
{
8300032f:	55                   	push   %ebp
83000330:	89 e5                	mov    %esp,%ebp
83000332:	83 ec 28             	sub    $0x28,%esp
    DIR* dir = (DIR*)malloc(sizeof(DIR));
83000335:	83 ec 0c             	sub    $0xc,%esp
83000338:	68 10 01 00 00       	push   $0x110
8300033d:	e8 68 01 00 00       	call   830004aa <malloc>
83000342:	83 c4 10             	add    $0x10,%esp
83000345:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(dir == (DIR*)0)
83000348:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8300034c:	75 07                	jne    83000355 <opendir+0x26>
    {
        return (DIR*)0;
8300034e:	b8 00 00 00 00       	mov    $0x0,%eax
83000353:	eb 43                	jmp    83000398 <opendir+0x69>
    }
    sys_arg_t args;
    args.id = SYS_OPENDIR;
83000355:	c7 45 dc 3d 00 00 00 	movl   $0x3d,-0x24(%ebp)
    args.arg0 = (int)path;
8300035c:	8b 45 08             	mov    0x8(%ebp),%eax
8300035f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    args.arg1 = (int)dir;
83000362:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000365:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int err = sys_call(&args);
83000368:	83 ec 0c             	sub    $0xc,%esp
8300036b:	8d 45 dc             	lea    -0x24(%ebp),%eax
8300036e:	50                   	push   %eax
8300036f:	e8 da fc ff ff       	call   8300004e <sys_call>
83000374:	83 c4 10             	add    $0x10,%esp
83000377:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(err < 0)
8300037a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8300037e:	79 15                	jns    83000395 <opendir+0x66>
    {
        free(dir);
83000380:	83 ec 0c             	sub    $0xc,%esp
83000383:	ff 75 f4             	pushl  -0xc(%ebp)
83000386:	e8 3b 01 00 00       	call   830004c6 <free>
8300038b:	83 c4 10             	add    $0x10,%esp
        return (DIR*)0;
8300038e:	b8 00 00 00 00       	mov    $0x0,%eax
83000393:	eb 03                	jmp    83000398 <opendir+0x69>
    }
    return dir;
83000395:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
83000398:	c9                   	leave  
83000399:	c3                   	ret    

8300039a <readdir>:

struct dirent* readdir(DIR* dir)
{
8300039a:	55                   	push   %ebp
8300039b:	89 e5                	mov    %esp,%ebp
8300039d:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_READDIR;
830003a0:	c7 45 e8 3e 00 00 00 	movl   $0x3e,-0x18(%ebp)
    args.arg0 = (int)dir;
830003a7:	8b 45 08             	mov    0x8(%ebp),%eax
830003aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
    args.arg1 = (int)&dir->dirent;
830003ad:	8b 45 08             	mov    0x8(%ebp),%eax
830003b0:	83 c0 04             	add    $0x4,%eax
830003b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = sys_call(&args);
830003b6:	8d 45 e8             	lea    -0x18(%ebp),%eax
830003b9:	50                   	push   %eax
830003ba:	e8 8f fc ff ff       	call   8300004e <sys_call>
830003bf:	83 c4 04             	add    $0x4,%esp
830003c2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(err < 0)
830003c5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
830003c9:	79 07                	jns    830003d2 <readdir+0x38>
    {
        return (struct dirent*)0;
830003cb:	b8 00 00 00 00       	mov    $0x0,%eax
830003d0:	eb 06                	jmp    830003d8 <readdir+0x3e>
    }
    return &dir->dirent;
830003d2:	8b 45 08             	mov    0x8(%ebp),%eax
830003d5:	83 c0 04             	add    $0x4,%eax
}
830003d8:	c9                   	leave  
830003d9:	c3                   	ret    

830003da <ioctl>:

int ioctl(int file, int cmd, int arg0, int arg1) {
830003da:	55                   	push   %ebp
830003db:	89 e5                	mov    %esp,%ebp
830003dd:	83 ec 20             	sub    $0x20,%esp
    sys_arg_t args;
    args.id = SYS_IOCTL;
830003e0:	c7 45 ec 3b 00 00 00 	movl   $0x3b,-0x14(%ebp)
    args.arg0 = file;
830003e7:	8b 45 08             	mov    0x8(%ebp),%eax
830003ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = cmd;
830003ed:	8b 45 0c             	mov    0xc(%ebp),%eax
830003f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = arg0;
830003f3:	8b 45 10             	mov    0x10(%ebp),%eax
830003f6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    args.arg3 = arg1;
830003f9:	8b 45 14             	mov    0x14(%ebp),%eax
830003fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return sys_call(&args);
830003ff:	8d 45 ec             	lea    -0x14(%ebp),%eax
83000402:	50                   	push   %eax
83000403:	e8 46 fc ff ff       	call   8300004e <sys_call>
83000408:	83 c4 04             	add    $0x4,%esp
}
8300040b:	c9                   	leave  
8300040c:	c3                   	ret    

8300040d <closedir>:

int closedir(DIR* dir)
{
8300040d:	55                   	push   %ebp
8300040e:	89 e5                	mov    %esp,%ebp
83000410:	83 ec 28             	sub    $0x28,%esp
    sys_arg_t args;
    args.id = SYS_CLOSEDIR;
83000413:	c7 45 e4 3f 00 00 00 	movl   $0x3f,-0x1c(%ebp)
    args.arg0 = (int)dir;
8300041a:	8b 45 08             	mov    0x8(%ebp),%eax
8300041d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    sys_call(&args);
83000420:	8d 45 e4             	lea    -0x1c(%ebp),%eax
83000423:	50                   	push   %eax
83000424:	e8 25 fc ff ff       	call   8300004e <sys_call>
83000429:	83 c4 04             	add    $0x4,%esp
    free(dir);
8300042c:	83 ec 0c             	sub    $0xc,%esp
8300042f:	ff 75 08             	pushl  0x8(%ebp)
83000432:	e8 8f 00 00 00       	call   830004c6 <free>
83000437:	83 c4 10             	add    $0x10,%esp
    return 0;
8300043a:	b8 00 00 00 00       	mov    $0x0,%eax
}
8300043f:	c9                   	leave  
83000440:	c3                   	ret    

83000441 <main>:
#include <getopt.h>
#include "dev/tty.h"
#include "fs/file.h"

int main(int argc, char **argv) 
{
83000441:	55                   	push   %ebp
83000442:	89 e5                	mov    %esp,%ebp
83000444:	83 ec 10             	sub    $0x10,%esp
    int a = 3/0;
83000447:	b8 03 00 00 00       	mov    $0x3,%eax
8300044c:	b9 00 00 00 00       	mov    $0x0,%ecx
83000451:	99                   	cltd   
83000452:	f7 f9                	idiv   %ecx
83000454:	89 45 fc             	mov    %eax,-0x4(%ebp)
    *(char*)0 = 0x1234;
83000457:	b8 00 00 00 00       	mov    $0x0,%eax
8300045c:	c6 00 34             	movb   $0x34,(%eax)
    return 0;
8300045f:	b8 00 00 00 00       	mov    $0x0,%eax
}
83000464:	c9                   	leave  
83000465:	c3                   	ret    

83000466 <exit>:
83000466:	55                   	push   %ebp
83000467:	89 e5                	mov    %esp,%ebp
83000469:	83 ec 08             	sub    $0x8,%esp
8300046c:	83 ec 08             	sub    $0x8,%esp
8300046f:	6a 00                	push   $0x0
83000471:	ff 75 08             	pushl  0x8(%ebp)
83000474:	e8 6b 0b 00 00       	call   83000fe4 <__call_exitprocs>
83000479:	83 c4 10             	add    $0x10,%esp
8300047c:	a1 cc 17 00 83       	mov    0x830017cc,%eax
83000481:	8b 40 3c             	mov    0x3c(%eax),%eax
83000484:	85 c0                	test   %eax,%eax
83000486:	74 17                	je     8300049f <exit+0x39>
83000488:	a1 cc 17 00 83       	mov    0x830017cc,%eax
8300048d:	8b 40 3c             	mov    0x3c(%eax),%eax
83000490:	8b 15 cc 17 00 83    	mov    0x830017cc,%edx
83000496:	83 ec 0c             	sub    $0xc,%esp
83000499:	52                   	push   %edx
8300049a:	ff d0                	call   *%eax
8300049c:	83 c4 10             	add    $0x10,%esp
8300049f:	83 ec 0c             	sub    $0xc,%esp
830004a2:	ff 75 08             	pushl  0x8(%ebp)
830004a5:	e8 42 fe ff ff       	call   830002ec <_exit>

830004aa <malloc>:
830004aa:	55                   	push   %ebp
830004ab:	89 e5                	mov    %esp,%ebp
830004ad:	83 ec 08             	sub    $0x8,%esp
830004b0:	a1 04 1c 00 83       	mov    0x83001c04,%eax
830004b5:	83 ec 08             	sub    $0x8,%esp
830004b8:	ff 75 08             	pushl  0x8(%ebp)
830004bb:	50                   	push   %eax
830004bc:	e8 b5 02 00 00       	call   83000776 <_malloc_r>
830004c1:	83 c4 10             	add    $0x10,%esp
830004c4:	c9                   	leave  
830004c5:	c3                   	ret    

830004c6 <free>:
830004c6:	55                   	push   %ebp
830004c7:	89 e5                	mov    %esp,%ebp
830004c9:	83 ec 08             	sub    $0x8,%esp
830004cc:	a1 04 1c 00 83       	mov    0x83001c04,%eax
830004d1:	83 ec 08             	sub    $0x8,%esp
830004d4:	ff 75 08             	pushl  0x8(%ebp)
830004d7:	50                   	push   %eax
830004d8:	e8 1c 0c 00 00       	call   830010f9 <_free_r>
830004dd:	83 c4 10             	add    $0x10,%esp
830004e0:	90                   	nop
830004e1:	c9                   	leave  
830004e2:	c3                   	ret    

830004e3 <malloc_extend_top>:
830004e3:	55                   	push   %ebp
830004e4:	89 e5                	mov    %esp,%ebp
830004e6:	83 ec 38             	sub    $0x38,%esp
830004e9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
830004f0:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
830004f5:	8b 40 08             	mov    0x8(%eax),%eax
830004f8:	89 45 e0             	mov    %eax,-0x20(%ebp)
830004fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
830004fe:	8b 40 04             	mov    0x4(%eax),%eax
83000501:	83 e0 fc             	and    $0xfffffffc,%eax
83000504:	89 45 dc             	mov    %eax,-0x24(%ebp)
83000507:	8b 55 e0             	mov    -0x20(%ebp),%edx
8300050a:	8b 45 dc             	mov    -0x24(%ebp),%eax
8300050d:	01 d0                	add    %edx,%eax
8300050f:	89 45 d8             	mov    %eax,-0x28(%ebp)
83000512:	8b 15 40 20 00 83    	mov    0x83002040,%edx
83000518:	8b 45 0c             	mov    0xc(%ebp),%eax
8300051b:	01 d0                	add    %edx,%eax
8300051d:	83 c0 10             	add    $0x10,%eax
83000520:	89 45 e8             	mov    %eax,-0x18(%ebp)
83000523:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
8300052a:	a1 2c 20 00 83       	mov    0x8300202c,%eax
8300052f:	83 f8 ff             	cmp    $0xffffffff,%eax
83000532:	74 15                	je     83000549 <malloc_extend_top+0x66>
83000534:	8b 55 d4             	mov    -0x2c(%ebp),%edx
83000537:	8b 45 e8             	mov    -0x18(%ebp),%eax
8300053a:	01 d0                	add    %edx,%eax
8300053c:	8d 50 ff             	lea    -0x1(%eax),%edx
8300053f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
83000542:	f7 d8                	neg    %eax
83000544:	21 d0                	and    %edx,%eax
83000546:	89 45 e8             	mov    %eax,-0x18(%ebp)
83000549:	8b 45 e8             	mov    -0x18(%ebp),%eax
8300054c:	83 ec 08             	sub    $0x8,%esp
8300054f:	50                   	push   %eax
83000550:	ff 75 08             	pushl  0x8(%ebp)
83000553:	e8 4c 0a 00 00       	call   83000fa4 <_sbrk_r>
83000558:	83 c4 10             	add    $0x10,%esp
8300055b:	89 45 f4             	mov    %eax,-0xc(%ebp)
8300055e:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
83000562:	0f 84 0b 02 00 00    	je     83000773 <malloc_extend_top+0x290>
83000568:	8b 45 f4             	mov    -0xc(%ebp),%eax
8300056b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
8300056e:	73 0e                	jae    8300057e <malloc_extend_top+0x9b>
83000570:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
83000575:	39 45 e0             	cmp    %eax,-0x20(%ebp)
83000578:	0f 85 f5 01 00 00    	jne    83000773 <malloc_extend_top+0x290>
8300057e:	a1 60 20 00 83       	mov    0x83002060,%eax
83000583:	89 c2                	mov    %eax,%edx
83000585:	8b 45 e8             	mov    -0x18(%ebp),%eax
83000588:	01 d0                	add    %edx,%eax
8300058a:	a3 60 20 00 83       	mov    %eax,0x83002060
8300058f:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000592:	3b 45 d8             	cmp    -0x28(%ebp),%eax
83000595:	75 30                	jne    830005c7 <malloc_extend_top+0xe4>
83000597:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8300059a:	8d 50 ff             	lea    -0x1(%eax),%edx
8300059d:	8b 45 d8             	mov    -0x28(%ebp),%eax
830005a0:	21 d0                	and    %edx,%eax
830005a2:	85 c0                	test   %eax,%eax
830005a4:	75 21                	jne    830005c7 <malloc_extend_top+0xe4>
830005a6:	8b 55 e8             	mov    -0x18(%ebp),%edx
830005a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
830005ac:	01 d0                	add    %edx,%eax
830005ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
830005b1:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
830005b6:	8b 40 08             	mov    0x8(%eax),%eax
830005b9:	8b 55 d0             	mov    -0x30(%ebp),%edx
830005bc:	83 ca 01             	or     $0x1,%edx
830005bf:	89 50 04             	mov    %edx,0x4(%eax)
830005c2:	e9 76 01 00 00       	jmp    8300073d <malloc_extend_top+0x25a>
830005c7:	a1 2c 20 00 83       	mov    0x8300202c,%eax
830005cc:	83 f8 ff             	cmp    $0xffffffff,%eax
830005cf:	75 0a                	jne    830005db <malloc_extend_top+0xf8>
830005d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
830005d4:	a3 2c 20 00 83       	mov    %eax,0x8300202c
830005d9:	eb 13                	jmp    830005ee <malloc_extend_top+0x10b>
830005db:	8b 15 60 20 00 83    	mov    0x83002060,%edx
830005e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
830005e4:	2b 45 d8             	sub    -0x28(%ebp),%eax
830005e7:	01 d0                	add    %edx,%eax
830005e9:	a3 60 20 00 83       	mov    %eax,0x83002060
830005ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
830005f1:	83 c0 08             	add    $0x8,%eax
830005f4:	83 e0 07             	and    $0x7,%eax
830005f7:	89 45 cc             	mov    %eax,-0x34(%ebp)
830005fa:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
830005fe:	74 13                	je     83000613 <malloc_extend_top+0x130>
83000600:	b8 08 00 00 00       	mov    $0x8,%eax
83000605:	2b 45 cc             	sub    -0x34(%ebp),%eax
83000608:	89 45 f0             	mov    %eax,-0x10(%ebp)
8300060b:	8b 45 f0             	mov    -0x10(%ebp),%eax
8300060e:	01 45 f4             	add    %eax,-0xc(%ebp)
83000611:	eb 07                	jmp    8300061a <malloc_extend_top+0x137>
83000613:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
8300061a:	8b 55 f4             	mov    -0xc(%ebp),%edx
8300061d:	8b 45 e8             	mov    -0x18(%ebp),%eax
83000620:	01 d0                	add    %edx,%eax
83000622:	89 c2                	mov    %eax,%edx
83000624:	8b 45 d4             	mov    -0x2c(%ebp),%eax
83000627:	83 e8 01             	sub    $0x1,%eax
8300062a:	21 c2                	and    %eax,%edx
8300062c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8300062f:	29 d0                	sub    %edx,%eax
83000631:	01 45 f0             	add    %eax,-0x10(%ebp)
83000634:	8b 45 d4             	mov    -0x2c(%ebp),%eax
83000637:	83 e8 01             	sub    $0x1,%eax
8300063a:	21 45 f0             	and    %eax,-0x10(%ebp)
8300063d:	8b 45 f0             	mov    -0x10(%ebp),%eax
83000640:	83 ec 08             	sub    $0x8,%esp
83000643:	50                   	push   %eax
83000644:	ff 75 08             	pushl  0x8(%ebp)
83000647:	e8 58 09 00 00       	call   83000fa4 <_sbrk_r>
8300064c:	83 c4 10             	add    $0x10,%esp
8300064f:	89 45 ec             	mov    %eax,-0x14(%ebp)
83000652:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
83000656:	75 28                	jne    83000680 <malloc_extend_top+0x19d>
83000658:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
8300065f:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
83000666:	8b 55 f4             	mov    -0xc(%ebp),%edx
83000669:	8b 45 e8             	mov    -0x18(%ebp),%eax
8300066c:	01 d0                	add    %edx,%eax
8300066e:	89 45 ec             	mov    %eax,-0x14(%ebp)
83000671:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
83000675:	74 09                	je     83000680 <malloc_extend_top+0x19d>
83000677:	8b 45 cc             	mov    -0x34(%ebp),%eax
8300067a:	83 e8 08             	sub    $0x8,%eax
8300067d:	01 45 ec             	add    %eax,-0x14(%ebp)
83000680:	a1 60 20 00 83       	mov    0x83002060,%eax
83000685:	89 c2                	mov    %eax,%edx
83000687:	8b 45 f0             	mov    -0x10(%ebp),%eax
8300068a:	01 d0                	add    %edx,%eax
8300068c:	a3 60 20 00 83       	mov    %eax,0x83002060
83000691:	ba 20 1c 00 83       	mov    $0x83001c20,%edx
83000696:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000699:	89 42 08             	mov    %eax,0x8(%edx)
8300069c:	8b 45 ec             	mov    -0x14(%ebp),%eax
8300069f:	2b 45 f4             	sub    -0xc(%ebp),%eax
830006a2:	89 c2                	mov    %eax,%edx
830006a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
830006a7:	01 d0                	add    %edx,%eax
830006a9:	89 45 d0             	mov    %eax,-0x30(%ebp)
830006ac:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
830006b1:	8b 40 08             	mov    0x8(%eax),%eax
830006b4:	8b 55 d0             	mov    -0x30(%ebp),%edx
830006b7:	83 ca 01             	or     $0x1,%edx
830006ba:	89 50 04             	mov    %edx,0x4(%eax)
830006bd:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
830006c2:	39 45 e0             	cmp    %eax,-0x20(%ebp)
830006c5:	74 76                	je     8300073d <malloc_extend_top+0x25a>
830006c7:	83 7d dc 0f          	cmpl   $0xf,-0x24(%ebp)
830006cb:	77 14                	ja     830006e1 <malloc_extend_top+0x1fe>
830006cd:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
830006d2:	8b 40 08             	mov    0x8(%eax),%eax
830006d5:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
830006dc:	e9 93 00 00 00       	jmp    83000774 <malloc_extend_top+0x291>
830006e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
830006e4:	83 e8 0c             	sub    $0xc,%eax
830006e7:	83 e0 f8             	and    $0xfffffff8,%eax
830006ea:	89 45 dc             	mov    %eax,-0x24(%ebp)
830006ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
830006f0:	8b 40 04             	mov    0x4(%eax),%eax
830006f3:	83 e0 01             	and    $0x1,%eax
830006f6:	0b 45 dc             	or     -0x24(%ebp),%eax
830006f9:	89 c2                	mov    %eax,%edx
830006fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
830006fe:	89 50 04             	mov    %edx,0x4(%eax)
83000701:	8b 55 e0             	mov    -0x20(%ebp),%edx
83000704:	8b 45 dc             	mov    -0x24(%ebp),%eax
83000707:	01 d0                	add    %edx,%eax
83000709:	c7 40 04 05 00 00 00 	movl   $0x5,0x4(%eax)
83000710:	8b 45 dc             	mov    -0x24(%ebp),%eax
83000713:	8d 50 04             	lea    0x4(%eax),%edx
83000716:	8b 45 e0             	mov    -0x20(%ebp),%eax
83000719:	01 d0                	add    %edx,%eax
8300071b:	c7 40 04 05 00 00 00 	movl   $0x5,0x4(%eax)
83000722:	83 7d dc 0f          	cmpl   $0xf,-0x24(%ebp)
83000726:	76 15                	jbe    8300073d <malloc_extend_top+0x25a>
83000728:	8b 45 e0             	mov    -0x20(%ebp),%eax
8300072b:	83 c0 08             	add    $0x8,%eax
8300072e:	83 ec 08             	sub    $0x8,%esp
83000731:	50                   	push   %eax
83000732:	ff 75 08             	pushl  0x8(%ebp)
83000735:	e8 bf 09 00 00       	call   830010f9 <_free_r>
8300073a:	83 c4 10             	add    $0x10,%esp
8300073d:	a1 60 20 00 83       	mov    0x83002060,%eax
83000742:	89 c2                	mov    %eax,%edx
83000744:	a1 44 20 00 83       	mov    0x83002044,%eax
83000749:	39 c2                	cmp    %eax,%edx
8300074b:	76 0a                	jbe    83000757 <malloc_extend_top+0x274>
8300074d:	a1 60 20 00 83       	mov    0x83002060,%eax
83000752:	a3 44 20 00 83       	mov    %eax,0x83002044
83000757:	a1 60 20 00 83       	mov    0x83002060,%eax
8300075c:	89 c2                	mov    %eax,%edx
8300075e:	a1 48 20 00 83       	mov    0x83002048,%eax
83000763:	39 c2                	cmp    %eax,%edx
83000765:	76 0d                	jbe    83000774 <malloc_extend_top+0x291>
83000767:	a1 60 20 00 83       	mov    0x83002060,%eax
8300076c:	a3 48 20 00 83       	mov    %eax,0x83002048
83000771:	eb 01                	jmp    83000774 <malloc_extend_top+0x291>
83000773:	90                   	nop
83000774:	c9                   	leave  
83000775:	c3                   	ret    

83000776 <_malloc_r>:
83000776:	55                   	push   %ebp
83000777:	89 e5                	mov    %esp,%ebp
83000779:	53                   	push   %ebx
8300077a:	83 ec 44             	sub    $0x44,%esp
8300077d:	8b 45 0c             	mov    0xc(%ebp),%eax
83000780:	83 c0 0b             	add    $0xb,%eax
83000783:	83 f8 16             	cmp    $0x16,%eax
83000786:	76 0b                	jbe    83000793 <_malloc_r+0x1d>
83000788:	8b 45 0c             	mov    0xc(%ebp),%eax
8300078b:	83 c0 0b             	add    $0xb,%eax
8300078e:	83 e0 f8             	and    $0xfffffff8,%eax
83000791:	eb 05                	jmp    83000798 <_malloc_r+0x22>
83000793:	b8 10 00 00 00       	mov    $0x10,%eax
83000798:	89 45 d0             	mov    %eax,-0x30(%ebp)
8300079b:	8b 45 d0             	mov    -0x30(%ebp),%eax
8300079e:	85 c0                	test   %eax,%eax
830007a0:	78 08                	js     830007aa <_malloc_r+0x34>
830007a2:	8b 45 d0             	mov    -0x30(%ebp),%eax
830007a5:	3b 45 0c             	cmp    0xc(%ebp),%eax
830007a8:	73 13                	jae    830007bd <_malloc_r+0x47>
830007aa:	8b 45 08             	mov    0x8(%ebp),%eax
830007ad:	c7 00 0c 00 00 00    	movl   $0xc,(%eax)
830007b3:	b8 00 00 00 00       	mov    $0x0,%eax
830007b8:	e9 d6 07 00 00       	jmp    83000f93 <_malloc_r+0x81d>
830007bd:	83 ec 0c             	sub    $0xc,%esp
830007c0:	ff 75 08             	pushl  0x8(%ebp)
830007c3:	e8 d0 07 00 00       	call   83000f98 <__malloc_lock>
830007c8:	83 c4 10             	add    $0x10,%esp
830007cb:	81 7d d0 f7 01 00 00 	cmpl   $0x1f7,-0x30(%ebp)
830007d2:	0f 87 b0 00 00 00    	ja     83000888 <_malloc_r+0x112>
830007d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
830007db:	c1 e8 03             	shr    $0x3,%eax
830007de:	89 45 f0             	mov    %eax,-0x10(%ebp)
830007e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
830007e4:	83 c0 01             	add    $0x1,%eax
830007e7:	01 c0                	add    %eax,%eax
830007e9:	c1 e0 02             	shl    $0x2,%eax
830007ec:	05 20 1c 00 83       	add    $0x83001c20,%eax
830007f1:	83 e8 08             	sub    $0x8,%eax
830007f4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
830007f7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
830007fa:	8b 40 0c             	mov    0xc(%eax),%eax
830007fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
83000800:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000803:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
83000806:	75 0d                	jne    83000815 <_malloc_r+0x9f>
83000808:	83 45 d4 08          	addl   $0x8,-0x2c(%ebp)
8300080c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8300080f:	8b 40 0c             	mov    0xc(%eax),%eax
83000812:	89 45 f4             	mov    %eax,-0xc(%ebp)
83000815:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000818:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
8300081b:	74 62                	je     8300087f <_malloc_r+0x109>
8300081d:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000820:	8b 40 04             	mov    0x4(%eax),%eax
83000823:	83 e0 fc             	and    $0xfffffffc,%eax
83000826:	89 45 cc             	mov    %eax,-0x34(%ebp)
83000829:	8b 45 f4             	mov    -0xc(%ebp),%eax
8300082c:	8b 40 0c             	mov    0xc(%eax),%eax
8300082f:	89 45 d8             	mov    %eax,-0x28(%ebp)
83000832:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000835:	8b 40 08             	mov    0x8(%eax),%eax
83000838:	89 45 dc             	mov    %eax,-0x24(%ebp)
8300083b:	8b 45 dc             	mov    -0x24(%ebp),%eax
8300083e:	8b 55 d8             	mov    -0x28(%ebp),%edx
83000841:	89 50 0c             	mov    %edx,0xc(%eax)
83000844:	8b 45 d8             	mov    -0x28(%ebp),%eax
83000847:	8b 55 dc             	mov    -0x24(%ebp),%edx
8300084a:	89 50 08             	mov    %edx,0x8(%eax)
8300084d:	8b 55 f4             	mov    -0xc(%ebp),%edx
83000850:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000853:	01 d0                	add    %edx,%eax
83000855:	8b 50 04             	mov    0x4(%eax),%edx
83000858:	8b 4d f4             	mov    -0xc(%ebp),%ecx
8300085b:	8b 45 cc             	mov    -0x34(%ebp),%eax
8300085e:	01 c8                	add    %ecx,%eax
83000860:	83 ca 01             	or     $0x1,%edx
83000863:	89 50 04             	mov    %edx,0x4(%eax)
83000866:	83 ec 0c             	sub    $0xc,%esp
83000869:	ff 75 08             	pushl  0x8(%ebp)
8300086c:	e8 2d 07 00 00       	call   83000f9e <__malloc_unlock>
83000871:	83 c4 10             	add    $0x10,%esp
83000874:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000877:	83 c0 08             	add    $0x8,%eax
8300087a:	e9 14 07 00 00       	jmp    83000f93 <_malloc_r+0x81d>
8300087f:	83 45 f0 02          	addl   $0x2,-0x10(%ebp)
83000883:	e9 46 01 00 00       	jmp    830009ce <_malloc_r+0x258>
83000888:	8b 45 d0             	mov    -0x30(%ebp),%eax
8300088b:	c1 e8 09             	shr    $0x9,%eax
8300088e:	85 c0                	test   %eax,%eax
83000890:	75 08                	jne    8300089a <_malloc_r+0x124>
83000892:	8b 45 d0             	mov    -0x30(%ebp),%eax
83000895:	c1 e8 03             	shr    $0x3,%eax
83000898:	eb 77                	jmp    83000911 <_malloc_r+0x19b>
8300089a:	8b 45 d0             	mov    -0x30(%ebp),%eax
8300089d:	c1 e8 09             	shr    $0x9,%eax
830008a0:	83 f8 04             	cmp    $0x4,%eax
830008a3:	77 0b                	ja     830008b0 <_malloc_r+0x13a>
830008a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
830008a8:	c1 e8 06             	shr    $0x6,%eax
830008ab:	83 c0 38             	add    $0x38,%eax
830008ae:	eb 61                	jmp    83000911 <_malloc_r+0x19b>
830008b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
830008b3:	c1 e8 09             	shr    $0x9,%eax
830008b6:	83 f8 14             	cmp    $0x14,%eax
830008b9:	77 0b                	ja     830008c6 <_malloc_r+0x150>
830008bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
830008be:	c1 e8 09             	shr    $0x9,%eax
830008c1:	83 c0 5b             	add    $0x5b,%eax
830008c4:	eb 4b                	jmp    83000911 <_malloc_r+0x19b>
830008c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
830008c9:	c1 e8 09             	shr    $0x9,%eax
830008cc:	83 f8 54             	cmp    $0x54,%eax
830008cf:	77 0b                	ja     830008dc <_malloc_r+0x166>
830008d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
830008d4:	c1 e8 0c             	shr    $0xc,%eax
830008d7:	83 c0 6e             	add    $0x6e,%eax
830008da:	eb 35                	jmp    83000911 <_malloc_r+0x19b>
830008dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
830008df:	c1 e8 09             	shr    $0x9,%eax
830008e2:	3d 54 01 00 00       	cmp    $0x154,%eax
830008e7:	77 0b                	ja     830008f4 <_malloc_r+0x17e>
830008e9:	8b 45 d0             	mov    -0x30(%ebp),%eax
830008ec:	c1 e8 0f             	shr    $0xf,%eax
830008ef:	83 c0 77             	add    $0x77,%eax
830008f2:	eb 1d                	jmp    83000911 <_malloc_r+0x19b>
830008f4:	8b 45 d0             	mov    -0x30(%ebp),%eax
830008f7:	c1 e8 09             	shr    $0x9,%eax
830008fa:	3d 54 05 00 00       	cmp    $0x554,%eax
830008ff:	77 0b                	ja     8300090c <_malloc_r+0x196>
83000901:	8b 45 d0             	mov    -0x30(%ebp),%eax
83000904:	c1 e8 12             	shr    $0x12,%eax
83000907:	83 c0 7c             	add    $0x7c,%eax
8300090a:	eb 05                	jmp    83000911 <_malloc_r+0x19b>
8300090c:	b8 7e 00 00 00       	mov    $0x7e,%eax
83000911:	89 45 f0             	mov    %eax,-0x10(%ebp)
83000914:	8b 45 f0             	mov    -0x10(%ebp),%eax
83000917:	83 c0 01             	add    $0x1,%eax
8300091a:	01 c0                	add    %eax,%eax
8300091c:	c1 e0 02             	shl    $0x2,%eax
8300091f:	05 20 1c 00 83       	add    $0x83001c20,%eax
83000924:	83 e8 08             	sub    $0x8,%eax
83000927:	89 45 ec             	mov    %eax,-0x14(%ebp)
8300092a:	8b 45 ec             	mov    -0x14(%ebp),%eax
8300092d:	8b 40 0c             	mov    0xc(%eax),%eax
83000930:	89 45 f4             	mov    %eax,-0xc(%ebp)
83000933:	e9 86 00 00 00       	jmp    830009be <_malloc_r+0x248>
83000938:	8b 45 f4             	mov    -0xc(%ebp),%eax
8300093b:	8b 40 04             	mov    0x4(%eax),%eax
8300093e:	83 e0 fc             	and    $0xfffffffc,%eax
83000941:	89 45 cc             	mov    %eax,-0x34(%ebp)
83000944:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000947:	2b 45 d0             	sub    -0x30(%ebp),%eax
8300094a:	89 45 e8             	mov    %eax,-0x18(%ebp)
8300094d:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
83000951:	7e 06                	jle    83000959 <_malloc_r+0x1e3>
83000953:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
83000957:	eb 71                	jmp    830009ca <_malloc_r+0x254>
83000959:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
8300095d:	78 56                	js     830009b5 <_malloc_r+0x23f>
8300095f:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000962:	8b 40 0c             	mov    0xc(%eax),%eax
83000965:	89 45 d8             	mov    %eax,-0x28(%ebp)
83000968:	8b 45 f4             	mov    -0xc(%ebp),%eax
8300096b:	8b 40 08             	mov    0x8(%eax),%eax
8300096e:	89 45 dc             	mov    %eax,-0x24(%ebp)
83000971:	8b 45 dc             	mov    -0x24(%ebp),%eax
83000974:	8b 55 d8             	mov    -0x28(%ebp),%edx
83000977:	89 50 0c             	mov    %edx,0xc(%eax)
8300097a:	8b 45 d8             	mov    -0x28(%ebp),%eax
8300097d:	8b 55 dc             	mov    -0x24(%ebp),%edx
83000980:	89 50 08             	mov    %edx,0x8(%eax)
83000983:	8b 55 f4             	mov    -0xc(%ebp),%edx
83000986:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000989:	01 d0                	add    %edx,%eax
8300098b:	8b 50 04             	mov    0x4(%eax),%edx
8300098e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
83000991:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000994:	01 c8                	add    %ecx,%eax
83000996:	83 ca 01             	or     $0x1,%edx
83000999:	89 50 04             	mov    %edx,0x4(%eax)
8300099c:	83 ec 0c             	sub    $0xc,%esp
8300099f:	ff 75 08             	pushl  0x8(%ebp)
830009a2:	e8 f7 05 00 00       	call   83000f9e <__malloc_unlock>
830009a7:	83 c4 10             	add    $0x10,%esp
830009aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
830009ad:	83 c0 08             	add    $0x8,%eax
830009b0:	e9 de 05 00 00       	jmp    83000f93 <_malloc_r+0x81d>
830009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
830009b8:	8b 40 0c             	mov    0xc(%eax),%eax
830009bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
830009be:	8b 45 f4             	mov    -0xc(%ebp),%eax
830009c1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
830009c4:	0f 85 6e ff ff ff    	jne    83000938 <_malloc_r+0x1c2>
830009ca:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
830009ce:	b8 28 1c 00 83       	mov    $0x83001c28,%eax
830009d3:	8b 40 08             	mov    0x8(%eax),%eax
830009d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
830009d9:	b8 28 1c 00 83       	mov    $0x83001c28,%eax
830009de:	39 45 f4             	cmp    %eax,-0xc(%ebp)
830009e1:	0f 84 9c 02 00 00    	je     83000c83 <_malloc_r+0x50d>
830009e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
830009ea:	8b 40 04             	mov    0x4(%eax),%eax
830009ed:	83 e0 fc             	and    $0xfffffffc,%eax
830009f0:	89 45 cc             	mov    %eax,-0x34(%ebp)
830009f3:	8b 45 cc             	mov    -0x34(%ebp),%eax
830009f6:	2b 45 d0             	sub    -0x30(%ebp),%eax
830009f9:	89 45 e8             	mov    %eax,-0x18(%ebp)
830009fc:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
83000a00:	7e 7a                	jle    83000a7c <_malloc_r+0x306>
83000a02:	8b 55 f4             	mov    -0xc(%ebp),%edx
83000a05:	8b 45 d0             	mov    -0x30(%ebp),%eax
83000a08:	01 d0                	add    %edx,%eax
83000a0a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
83000a0d:	8b 45 d0             	mov    -0x30(%ebp),%eax
83000a10:	83 c8 01             	or     $0x1,%eax
83000a13:	89 c2                	mov    %eax,%edx
83000a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000a18:	89 50 04             	mov    %edx,0x4(%eax)
83000a1b:	b8 28 1c 00 83       	mov    $0x83001c28,%eax
83000a20:	8b 55 c4             	mov    -0x3c(%ebp),%edx
83000a23:	89 50 0c             	mov    %edx,0xc(%eax)
83000a26:	ba 28 1c 00 83       	mov    $0x83001c28,%edx
83000a2b:	8b 40 0c             	mov    0xc(%eax),%eax
83000a2e:	89 42 08             	mov    %eax,0x8(%edx)
83000a31:	ba 28 1c 00 83       	mov    $0x83001c28,%edx
83000a36:	8b 45 c4             	mov    -0x3c(%ebp),%eax
83000a39:	89 50 0c             	mov    %edx,0xc(%eax)
83000a3c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
83000a3f:	8b 50 0c             	mov    0xc(%eax),%edx
83000a42:	8b 45 c4             	mov    -0x3c(%ebp),%eax
83000a45:	89 50 08             	mov    %edx,0x8(%eax)
83000a48:	8b 45 e8             	mov    -0x18(%ebp),%eax
83000a4b:	83 c8 01             	or     $0x1,%eax
83000a4e:	89 c2                	mov    %eax,%edx
83000a50:	8b 45 c4             	mov    -0x3c(%ebp),%eax
83000a53:	89 50 04             	mov    %edx,0x4(%eax)
83000a56:	8b 55 e8             	mov    -0x18(%ebp),%edx
83000a59:	8b 45 c4             	mov    -0x3c(%ebp),%eax
83000a5c:	01 c2                	add    %eax,%edx
83000a5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
83000a61:	89 02                	mov    %eax,(%edx)
83000a63:	83 ec 0c             	sub    $0xc,%esp
83000a66:	ff 75 08             	pushl  0x8(%ebp)
83000a69:	e8 30 05 00 00       	call   83000f9e <__malloc_unlock>
83000a6e:	83 c4 10             	add    $0x10,%esp
83000a71:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000a74:	83 c0 08             	add    $0x8,%eax
83000a77:	e9 17 05 00 00       	jmp    83000f93 <_malloc_r+0x81d>
83000a7c:	b8 28 1c 00 83       	mov    $0x83001c28,%eax
83000a81:	ba 28 1c 00 83       	mov    $0x83001c28,%edx
83000a86:	89 50 0c             	mov    %edx,0xc(%eax)
83000a89:	ba 28 1c 00 83       	mov    $0x83001c28,%edx
83000a8e:	8b 40 0c             	mov    0xc(%eax),%eax
83000a91:	89 42 08             	mov    %eax,0x8(%edx)
83000a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
83000a98:	78 32                	js     83000acc <_malloc_r+0x356>
83000a9a:	8b 55 f4             	mov    -0xc(%ebp),%edx
83000a9d:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000aa0:	01 d0                	add    %edx,%eax
83000aa2:	8b 50 04             	mov    0x4(%eax),%edx
83000aa5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
83000aa8:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000aab:	01 c8                	add    %ecx,%eax
83000aad:	83 ca 01             	or     $0x1,%edx
83000ab0:	89 50 04             	mov    %edx,0x4(%eax)
83000ab3:	83 ec 0c             	sub    $0xc,%esp
83000ab6:	ff 75 08             	pushl  0x8(%ebp)
83000ab9:	e8 e0 04 00 00       	call   83000f9e <__malloc_unlock>
83000abe:	83 c4 10             	add    $0x10,%esp
83000ac1:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000ac4:	83 c0 08             	add    $0x8,%eax
83000ac7:	e9 c7 04 00 00       	jmp    83000f93 <_malloc_r+0x81d>
83000acc:	81 7d cc ff 01 00 00 	cmpl   $0x1ff,-0x34(%ebp)
83000ad3:	77 7f                	ja     83000b54 <_malloc_r+0x3de>
83000ad5:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000ad8:	c1 e8 03             	shr    $0x3,%eax
83000adb:	89 45 c8             	mov    %eax,-0x38(%ebp)
83000ade:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
83000ae3:	8b 58 04             	mov    0x4(%eax),%ebx
83000ae6:	8b 45 c8             	mov    -0x38(%ebp),%eax
83000ae9:	8d 50 03             	lea    0x3(%eax),%edx
83000aec:	85 c0                	test   %eax,%eax
83000aee:	0f 48 c2             	cmovs  %edx,%eax
83000af1:	c1 f8 02             	sar    $0x2,%eax
83000af4:	ba 01 00 00 00       	mov    $0x1,%edx
83000af9:	89 c1                	mov    %eax,%ecx
83000afb:	d3 e2                	shl    %cl,%edx
83000afd:	89 d0                	mov    %edx,%eax
83000aff:	ba 20 1c 00 83       	mov    $0x83001c20,%edx
83000b04:	09 d8                	or     %ebx,%eax
83000b06:	89 42 04             	mov    %eax,0x4(%edx)
83000b09:	8b 45 c8             	mov    -0x38(%ebp),%eax
83000b0c:	83 c0 01             	add    $0x1,%eax
83000b0f:	01 c0                	add    %eax,%eax
83000b11:	c1 e0 02             	shl    $0x2,%eax
83000b14:	05 20 1c 00 83       	add    $0x83001c20,%eax
83000b19:	83 e8 08             	sub    $0x8,%eax
83000b1c:	89 45 d8             	mov    %eax,-0x28(%ebp)
83000b1f:	8b 45 d8             	mov    -0x28(%ebp),%eax
83000b22:	8b 40 08             	mov    0x8(%eax),%eax
83000b25:	89 45 dc             	mov    %eax,-0x24(%ebp)
83000b28:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000b2b:	8b 55 d8             	mov    -0x28(%ebp),%edx
83000b2e:	89 50 0c             	mov    %edx,0xc(%eax)
83000b31:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000b34:	8b 55 dc             	mov    -0x24(%ebp),%edx
83000b37:	89 50 08             	mov    %edx,0x8(%eax)
83000b3a:	8b 45 d8             	mov    -0x28(%ebp),%eax
83000b3d:	8b 55 f4             	mov    -0xc(%ebp),%edx
83000b40:	89 50 08             	mov    %edx,0x8(%eax)
83000b43:	8b 45 d8             	mov    -0x28(%ebp),%eax
83000b46:	8b 50 08             	mov    0x8(%eax),%edx
83000b49:	8b 45 dc             	mov    -0x24(%ebp),%eax
83000b4c:	89 50 0c             	mov    %edx,0xc(%eax)
83000b4f:	e9 2f 01 00 00       	jmp    83000c83 <_malloc_r+0x50d>
83000b54:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000b57:	c1 e8 09             	shr    $0x9,%eax
83000b5a:	85 c0                	test   %eax,%eax
83000b5c:	75 08                	jne    83000b66 <_malloc_r+0x3f0>
83000b5e:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000b61:	c1 e8 03             	shr    $0x3,%eax
83000b64:	eb 77                	jmp    83000bdd <_malloc_r+0x467>
83000b66:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000b69:	c1 e8 09             	shr    $0x9,%eax
83000b6c:	83 f8 04             	cmp    $0x4,%eax
83000b6f:	77 0b                	ja     83000b7c <_malloc_r+0x406>
83000b71:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000b74:	c1 e8 06             	shr    $0x6,%eax
83000b77:	83 c0 38             	add    $0x38,%eax
83000b7a:	eb 61                	jmp    83000bdd <_malloc_r+0x467>
83000b7c:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000b7f:	c1 e8 09             	shr    $0x9,%eax
83000b82:	83 f8 14             	cmp    $0x14,%eax
83000b85:	77 0b                	ja     83000b92 <_malloc_r+0x41c>
83000b87:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000b8a:	c1 e8 09             	shr    $0x9,%eax
83000b8d:	83 c0 5b             	add    $0x5b,%eax
83000b90:	eb 4b                	jmp    83000bdd <_malloc_r+0x467>
83000b92:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000b95:	c1 e8 09             	shr    $0x9,%eax
83000b98:	83 f8 54             	cmp    $0x54,%eax
83000b9b:	77 0b                	ja     83000ba8 <_malloc_r+0x432>
83000b9d:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000ba0:	c1 e8 0c             	shr    $0xc,%eax
83000ba3:	83 c0 6e             	add    $0x6e,%eax
83000ba6:	eb 35                	jmp    83000bdd <_malloc_r+0x467>
83000ba8:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000bab:	c1 e8 09             	shr    $0x9,%eax
83000bae:	3d 54 01 00 00       	cmp    $0x154,%eax
83000bb3:	77 0b                	ja     83000bc0 <_malloc_r+0x44a>
83000bb5:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000bb8:	c1 e8 0f             	shr    $0xf,%eax
83000bbb:	83 c0 77             	add    $0x77,%eax
83000bbe:	eb 1d                	jmp    83000bdd <_malloc_r+0x467>
83000bc0:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000bc3:	c1 e8 09             	shr    $0x9,%eax
83000bc6:	3d 54 05 00 00       	cmp    $0x554,%eax
83000bcb:	77 0b                	ja     83000bd8 <_malloc_r+0x462>
83000bcd:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000bd0:	c1 e8 12             	shr    $0x12,%eax
83000bd3:	83 c0 7c             	add    $0x7c,%eax
83000bd6:	eb 05                	jmp    83000bdd <_malloc_r+0x467>
83000bd8:	b8 7e 00 00 00       	mov    $0x7e,%eax
83000bdd:	89 45 c8             	mov    %eax,-0x38(%ebp)
83000be0:	8b 45 c8             	mov    -0x38(%ebp),%eax
83000be3:	83 c0 01             	add    $0x1,%eax
83000be6:	01 c0                	add    %eax,%eax
83000be8:	c1 e0 02             	shl    $0x2,%eax
83000beb:	05 20 1c 00 83       	add    $0x83001c20,%eax
83000bf0:	83 e8 08             	sub    $0x8,%eax
83000bf3:	89 45 d8             	mov    %eax,-0x28(%ebp)
83000bf6:	8b 45 d8             	mov    -0x28(%ebp),%eax
83000bf9:	8b 40 08             	mov    0x8(%eax),%eax
83000bfc:	89 45 dc             	mov    %eax,-0x24(%ebp)
83000bff:	8b 45 dc             	mov    -0x24(%ebp),%eax
83000c02:	3b 45 d8             	cmp    -0x28(%ebp),%eax
83000c05:	75 36                	jne    83000c3d <_malloc_r+0x4c7>
83000c07:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
83000c0c:	8b 58 04             	mov    0x4(%eax),%ebx
83000c0f:	8b 45 c8             	mov    -0x38(%ebp),%eax
83000c12:	8d 50 03             	lea    0x3(%eax),%edx
83000c15:	85 c0                	test   %eax,%eax
83000c17:	0f 48 c2             	cmovs  %edx,%eax
83000c1a:	c1 f8 02             	sar    $0x2,%eax
83000c1d:	ba 01 00 00 00       	mov    $0x1,%edx
83000c22:	89 c1                	mov    %eax,%ecx
83000c24:	d3 e2                	shl    %cl,%edx
83000c26:	89 d0                	mov    %edx,%eax
83000c28:	ba 20 1c 00 83       	mov    $0x83001c20,%edx
83000c2d:	09 d8                	or     %ebx,%eax
83000c2f:	89 42 04             	mov    %eax,0x4(%edx)
83000c32:	eb 28                	jmp    83000c5c <_malloc_r+0x4e6>
83000c34:	8b 45 dc             	mov    -0x24(%ebp),%eax
83000c37:	8b 40 08             	mov    0x8(%eax),%eax
83000c3a:	89 45 dc             	mov    %eax,-0x24(%ebp)
83000c3d:	8b 45 dc             	mov    -0x24(%ebp),%eax
83000c40:	3b 45 d8             	cmp    -0x28(%ebp),%eax
83000c43:	74 0e                	je     83000c53 <_malloc_r+0x4dd>
83000c45:	8b 45 dc             	mov    -0x24(%ebp),%eax
83000c48:	8b 40 04             	mov    0x4(%eax),%eax
83000c4b:	83 e0 fc             	and    $0xfffffffc,%eax
83000c4e:	39 45 cc             	cmp    %eax,-0x34(%ebp)
83000c51:	72 e1                	jb     83000c34 <_malloc_r+0x4be>
83000c53:	8b 45 dc             	mov    -0x24(%ebp),%eax
83000c56:	8b 40 0c             	mov    0xc(%eax),%eax
83000c59:	89 45 d8             	mov    %eax,-0x28(%ebp)
83000c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000c5f:	8b 55 d8             	mov    -0x28(%ebp),%edx
83000c62:	89 50 0c             	mov    %edx,0xc(%eax)
83000c65:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000c68:	8b 55 dc             	mov    -0x24(%ebp),%edx
83000c6b:	89 50 08             	mov    %edx,0x8(%eax)
83000c6e:	8b 45 d8             	mov    -0x28(%ebp),%eax
83000c71:	8b 55 f4             	mov    -0xc(%ebp),%edx
83000c74:	89 50 08             	mov    %edx,0x8(%eax)
83000c77:	8b 45 d8             	mov    -0x28(%ebp),%eax
83000c7a:	8b 50 08             	mov    0x8(%eax),%edx
83000c7d:	8b 45 dc             	mov    -0x24(%ebp),%eax
83000c80:	89 50 0c             	mov    %edx,0xc(%eax)
83000c83:	8b 45 f0             	mov    -0x10(%ebp),%eax
83000c86:	8d 50 03             	lea    0x3(%eax),%edx
83000c89:	85 c0                	test   %eax,%eax
83000c8b:	0f 48 c2             	cmovs  %edx,%eax
83000c8e:	c1 f8 02             	sar    $0x2,%eax
83000c91:	ba 01 00 00 00       	mov    $0x1,%edx
83000c96:	89 c1                	mov    %eax,%ecx
83000c98:	d3 e2                	shl    %cl,%edx
83000c9a:	89 d0                	mov    %edx,%eax
83000c9c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
83000c9f:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
83000ca4:	8b 40 04             	mov    0x4(%eax),%eax
83000ca7:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
83000caa:	0f 87 13 02 00 00    	ja     83000ec3 <_malloc_r+0x74d>
83000cb0:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
83000cb5:	8b 40 04             	mov    0x4(%eax),%eax
83000cb8:	23 45 e4             	and    -0x1c(%ebp),%eax
83000cbb:	85 c0                	test   %eax,%eax
83000cbd:	75 27                	jne    83000ce6 <_malloc_r+0x570>
83000cbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
83000cc2:	83 e0 fc             	and    $0xfffffffc,%eax
83000cc5:	83 c0 04             	add    $0x4,%eax
83000cc8:	89 45 f0             	mov    %eax,-0x10(%ebp)
83000ccb:	d1 65 e4             	shll   -0x1c(%ebp)
83000cce:	eb 07                	jmp    83000cd7 <_malloc_r+0x561>
83000cd0:	83 45 f0 04          	addl   $0x4,-0x10(%ebp)
83000cd4:	d1 65 e4             	shll   -0x1c(%ebp)
83000cd7:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
83000cdc:	8b 40 04             	mov    0x4(%eax),%eax
83000cdf:	23 45 e4             	and    -0x1c(%ebp),%eax
83000ce2:	85 c0                	test   %eax,%eax
83000ce4:	74 ea                	je     83000cd0 <_malloc_r+0x55a>
83000ce6:	8b 45 f0             	mov    -0x10(%ebp),%eax
83000ce9:	89 45 e0             	mov    %eax,-0x20(%ebp)
83000cec:	8b 45 f0             	mov    -0x10(%ebp),%eax
83000cef:	83 c0 01             	add    $0x1,%eax
83000cf2:	01 c0                	add    %eax,%eax
83000cf4:	c1 e0 02             	shl    $0x2,%eax
83000cf7:	05 20 1c 00 83       	add    $0x83001c20,%eax
83000cfc:	83 e8 08             	sub    $0x8,%eax
83000cff:	89 45 ec             	mov    %eax,-0x14(%ebp)
83000d02:	8b 45 ec             	mov    -0x14(%ebp),%eax
83000d05:	89 45 d4             	mov    %eax,-0x2c(%ebp)
83000d08:	8b 45 ec             	mov    -0x14(%ebp),%eax
83000d0b:	8b 40 0c             	mov    0xc(%eax),%eax
83000d0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
83000d11:	e9 22 01 00 00       	jmp    83000e38 <_malloc_r+0x6c2>
83000d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000d19:	8b 40 04             	mov    0x4(%eax),%eax
83000d1c:	83 e0 fc             	and    $0xfffffffc,%eax
83000d1f:	89 45 cc             	mov    %eax,-0x34(%ebp)
83000d22:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000d25:	2b 45 d0             	sub    -0x30(%ebp),%eax
83000d28:	89 45 e8             	mov    %eax,-0x18(%ebp)
83000d2b:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
83000d2f:	0f 8e 9e 00 00 00    	jle    83000dd3 <_malloc_r+0x65d>
83000d35:	8b 55 f4             	mov    -0xc(%ebp),%edx
83000d38:	8b 45 d0             	mov    -0x30(%ebp),%eax
83000d3b:	01 d0                	add    %edx,%eax
83000d3d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
83000d40:	8b 45 d0             	mov    -0x30(%ebp),%eax
83000d43:	83 c8 01             	or     $0x1,%eax
83000d46:	89 c2                	mov    %eax,%edx
83000d48:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000d4b:	89 50 04             	mov    %edx,0x4(%eax)
83000d4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000d51:	8b 40 0c             	mov    0xc(%eax),%eax
83000d54:	89 45 d8             	mov    %eax,-0x28(%ebp)
83000d57:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000d5a:	8b 40 08             	mov    0x8(%eax),%eax
83000d5d:	89 45 dc             	mov    %eax,-0x24(%ebp)
83000d60:	8b 45 dc             	mov    -0x24(%ebp),%eax
83000d63:	8b 55 d8             	mov    -0x28(%ebp),%edx
83000d66:	89 50 0c             	mov    %edx,0xc(%eax)
83000d69:	8b 45 d8             	mov    -0x28(%ebp),%eax
83000d6c:	8b 55 dc             	mov    -0x24(%ebp),%edx
83000d6f:	89 50 08             	mov    %edx,0x8(%eax)
83000d72:	b8 28 1c 00 83       	mov    $0x83001c28,%eax
83000d77:	8b 55 c4             	mov    -0x3c(%ebp),%edx
83000d7a:	89 50 0c             	mov    %edx,0xc(%eax)
83000d7d:	ba 28 1c 00 83       	mov    $0x83001c28,%edx
83000d82:	8b 40 0c             	mov    0xc(%eax),%eax
83000d85:	89 42 08             	mov    %eax,0x8(%edx)
83000d88:	ba 28 1c 00 83       	mov    $0x83001c28,%edx
83000d8d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
83000d90:	89 50 0c             	mov    %edx,0xc(%eax)
83000d93:	8b 45 c4             	mov    -0x3c(%ebp),%eax
83000d96:	8b 50 0c             	mov    0xc(%eax),%edx
83000d99:	8b 45 c4             	mov    -0x3c(%ebp),%eax
83000d9c:	89 50 08             	mov    %edx,0x8(%eax)
83000d9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
83000da2:	83 c8 01             	or     $0x1,%eax
83000da5:	89 c2                	mov    %eax,%edx
83000da7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
83000daa:	89 50 04             	mov    %edx,0x4(%eax)
83000dad:	8b 55 e8             	mov    -0x18(%ebp),%edx
83000db0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
83000db3:	01 c2                	add    %eax,%edx
83000db5:	8b 45 e8             	mov    -0x18(%ebp),%eax
83000db8:	89 02                	mov    %eax,(%edx)
83000dba:	83 ec 0c             	sub    $0xc,%esp
83000dbd:	ff 75 08             	pushl  0x8(%ebp)
83000dc0:	e8 d9 01 00 00       	call   83000f9e <__malloc_unlock>
83000dc5:	83 c4 10             	add    $0x10,%esp
83000dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000dcb:	83 c0 08             	add    $0x8,%eax
83000dce:	e9 c0 01 00 00       	jmp    83000f93 <_malloc_r+0x81d>
83000dd3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
83000dd7:	78 56                	js     83000e2f <_malloc_r+0x6b9>
83000dd9:	8b 55 f4             	mov    -0xc(%ebp),%edx
83000ddc:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000ddf:	01 d0                	add    %edx,%eax
83000de1:	8b 50 04             	mov    0x4(%eax),%edx
83000de4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
83000de7:	8b 45 cc             	mov    -0x34(%ebp),%eax
83000dea:	01 c8                	add    %ecx,%eax
83000dec:	83 ca 01             	or     $0x1,%edx
83000def:	89 50 04             	mov    %edx,0x4(%eax)
83000df2:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000df5:	8b 40 0c             	mov    0xc(%eax),%eax
83000df8:	89 45 d8             	mov    %eax,-0x28(%ebp)
83000dfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000dfe:	8b 40 08             	mov    0x8(%eax),%eax
83000e01:	89 45 dc             	mov    %eax,-0x24(%ebp)
83000e04:	8b 45 dc             	mov    -0x24(%ebp),%eax
83000e07:	8b 55 d8             	mov    -0x28(%ebp),%edx
83000e0a:	89 50 0c             	mov    %edx,0xc(%eax)
83000e0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
83000e10:	8b 55 dc             	mov    -0x24(%ebp),%edx
83000e13:	89 50 08             	mov    %edx,0x8(%eax)
83000e16:	83 ec 0c             	sub    $0xc,%esp
83000e19:	ff 75 08             	pushl  0x8(%ebp)
83000e1c:	e8 7d 01 00 00       	call   83000f9e <__malloc_unlock>
83000e21:	83 c4 10             	add    $0x10,%esp
83000e24:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000e27:	83 c0 08             	add    $0x8,%eax
83000e2a:	e9 64 01 00 00       	jmp    83000f93 <_malloc_r+0x81d>
83000e2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000e32:	8b 40 0c             	mov    0xc(%eax),%eax
83000e35:	89 45 f4             	mov    %eax,-0xc(%ebp)
83000e38:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000e3b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
83000e3e:	0f 85 d2 fe ff ff    	jne    83000d16 <_malloc_r+0x5a0>
83000e44:	83 45 ec 08          	addl   $0x8,-0x14(%ebp)
83000e48:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
83000e4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
83000e4f:	83 e0 03             	and    $0x3,%eax
83000e52:	85 c0                	test   %eax,%eax
83000e54:	0f 85 ae fe ff ff    	jne    83000d08 <_malloc_r+0x592>
83000e5a:	8b 45 e0             	mov    -0x20(%ebp),%eax
83000e5d:	83 e0 03             	and    $0x3,%eax
83000e60:	85 c0                	test   %eax,%eax
83000e62:	75 19                	jne    83000e7d <_malloc_r+0x707>
83000e64:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
83000e69:	8b 48 04             	mov    0x4(%eax),%ecx
83000e6c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
83000e6f:	f7 d0                	not    %eax
83000e71:	ba 20 1c 00 83       	mov    $0x83001c20,%edx
83000e76:	21 c8                	and    %ecx,%eax
83000e78:	89 42 04             	mov    %eax,0x4(%edx)
83000e7b:	eb 13                	jmp    83000e90 <_malloc_r+0x71a>
83000e7d:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
83000e81:	83 6d d4 08          	subl   $0x8,-0x2c(%ebp)
83000e85:	8b 45 d4             	mov    -0x2c(%ebp),%eax
83000e88:	8b 40 08             	mov    0x8(%eax),%eax
83000e8b:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
83000e8e:	74 ca                	je     83000e5a <_malloc_r+0x6e4>
83000e90:	d1 65 e4             	shll   -0x1c(%ebp)
83000e93:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
83000e98:	8b 40 04             	mov    0x4(%eax),%eax
83000e9b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
83000e9e:	77 23                	ja     83000ec3 <_malloc_r+0x74d>
83000ea0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
83000ea4:	74 1d                	je     83000ec3 <_malloc_r+0x74d>
83000ea6:	eb 07                	jmp    83000eaf <_malloc_r+0x739>
83000ea8:	83 45 f0 04          	addl   $0x4,-0x10(%ebp)
83000eac:	d1 65 e4             	shll   -0x1c(%ebp)
83000eaf:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
83000eb4:	8b 40 04             	mov    0x4(%eax),%eax
83000eb7:	23 45 e4             	and    -0x1c(%ebp),%eax
83000eba:	85 c0                	test   %eax,%eax
83000ebc:	74 ea                	je     83000ea8 <_malloc_r+0x732>
83000ebe:	e9 23 fe ff ff       	jmp    83000ce6 <_malloc_r+0x570>
83000ec3:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
83000ec8:	8b 40 08             	mov    0x8(%eax),%eax
83000ecb:	8b 40 04             	mov    0x4(%eax),%eax
83000ece:	83 e0 fc             	and    $0xfffffffc,%eax
83000ed1:	2b 45 d0             	sub    -0x30(%ebp),%eax
83000ed4:	89 45 e8             	mov    %eax,-0x18(%ebp)
83000ed7:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
83000edc:	8b 40 08             	mov    0x8(%eax),%eax
83000edf:	8b 40 04             	mov    0x4(%eax),%eax
83000ee2:	83 e0 fc             	and    $0xfffffffc,%eax
83000ee5:	39 45 d0             	cmp    %eax,-0x30(%ebp)
83000ee8:	77 06                	ja     83000ef0 <_malloc_r+0x77a>
83000eea:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
83000eee:	7f 53                	jg     83000f43 <_malloc_r+0x7cd>
83000ef0:	83 ec 08             	sub    $0x8,%esp
83000ef3:	ff 75 d0             	pushl  -0x30(%ebp)
83000ef6:	ff 75 08             	pushl  0x8(%ebp)
83000ef9:	e8 e5 f5 ff ff       	call   830004e3 <malloc_extend_top>
83000efe:	83 c4 10             	add    $0x10,%esp
83000f01:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
83000f06:	8b 40 08             	mov    0x8(%eax),%eax
83000f09:	8b 40 04             	mov    0x4(%eax),%eax
83000f0c:	83 e0 fc             	and    $0xfffffffc,%eax
83000f0f:	2b 45 d0             	sub    -0x30(%ebp),%eax
83000f12:	89 45 e8             	mov    %eax,-0x18(%ebp)
83000f15:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
83000f1a:	8b 40 08             	mov    0x8(%eax),%eax
83000f1d:	8b 40 04             	mov    0x4(%eax),%eax
83000f20:	83 e0 fc             	and    $0xfffffffc,%eax
83000f23:	39 45 d0             	cmp    %eax,-0x30(%ebp)
83000f26:	77 06                	ja     83000f2e <_malloc_r+0x7b8>
83000f28:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
83000f2c:	7f 15                	jg     83000f43 <_malloc_r+0x7cd>
83000f2e:	83 ec 0c             	sub    $0xc,%esp
83000f31:	ff 75 08             	pushl  0x8(%ebp)
83000f34:	e8 65 00 00 00       	call   83000f9e <__malloc_unlock>
83000f39:	83 c4 10             	add    $0x10,%esp
83000f3c:	b8 00 00 00 00       	mov    $0x0,%eax
83000f41:	eb 50                	jmp    83000f93 <_malloc_r+0x81d>
83000f43:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
83000f48:	8b 40 08             	mov    0x8(%eax),%eax
83000f4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
83000f4e:	8b 45 d0             	mov    -0x30(%ebp),%eax
83000f51:	83 c8 01             	or     $0x1,%eax
83000f54:	89 c2                	mov    %eax,%edx
83000f56:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000f59:	89 50 04             	mov    %edx,0x4(%eax)
83000f5c:	ba 20 1c 00 83       	mov    $0x83001c20,%edx
83000f61:	8b 4d f4             	mov    -0xc(%ebp),%ecx
83000f64:	8b 45 d0             	mov    -0x30(%ebp),%eax
83000f67:	01 c8                	add    %ecx,%eax
83000f69:	89 42 08             	mov    %eax,0x8(%edx)
83000f6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
83000f6f:	83 c8 01             	or     $0x1,%eax
83000f72:	89 c2                	mov    %eax,%edx
83000f74:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
83000f79:	8b 40 08             	mov    0x8(%eax),%eax
83000f7c:	89 50 04             	mov    %edx,0x4(%eax)
83000f7f:	83 ec 0c             	sub    $0xc,%esp
83000f82:	ff 75 08             	pushl  0x8(%ebp)
83000f85:	e8 14 00 00 00       	call   83000f9e <__malloc_unlock>
83000f8a:	83 c4 10             	add    $0x10,%esp
83000f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000f90:	83 c0 08             	add    $0x8,%eax
83000f93:	8b 5d fc             	mov    -0x4(%ebp),%ebx
83000f96:	c9                   	leave  
83000f97:	c3                   	ret    

83000f98 <__malloc_lock>:
83000f98:	55                   	push   %ebp
83000f99:	89 e5                	mov    %esp,%ebp
83000f9b:	90                   	nop
83000f9c:	5d                   	pop    %ebp
83000f9d:	c3                   	ret    

83000f9e <__malloc_unlock>:
83000f9e:	55                   	push   %ebp
83000f9f:	89 e5                	mov    %esp,%ebp
83000fa1:	90                   	nop
83000fa2:	5d                   	pop    %ebp
83000fa3:	c3                   	ret    

83000fa4 <_sbrk_r>:
83000fa4:	55                   	push   %ebp
83000fa5:	89 e5                	mov    %esp,%ebp
83000fa7:	83 ec 18             	sub    $0x18,%esp
83000faa:	c7 05 90 20 00 83 00 	movl   $0x0,0x83002090
83000fb1:	00 00 00 
83000fb4:	83 ec 0c             	sub    $0xc,%esp
83000fb7:	ff 75 0c             	pushl  0xc(%ebp)
83000fba:	e8 eb f2 ff ff       	call   830002aa <sbrk>
83000fbf:	83 c4 10             	add    $0x10,%esp
83000fc2:	89 45 f4             	mov    %eax,-0xc(%ebp)
83000fc5:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
83000fc9:	75 14                	jne    83000fdf <_sbrk_r+0x3b>
83000fcb:	a1 90 20 00 83       	mov    0x83002090,%eax
83000fd0:	85 c0                	test   %eax,%eax
83000fd2:	74 0b                	je     83000fdf <_sbrk_r+0x3b>
83000fd4:	8b 15 90 20 00 83    	mov    0x83002090,%edx
83000fda:	8b 45 08             	mov    0x8(%ebp),%eax
83000fdd:	89 10                	mov    %edx,(%eax)
83000fdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
83000fe2:	c9                   	leave  
83000fe3:	c3                   	ret    

83000fe4 <__call_exitprocs>:
83000fe4:	55                   	push   %ebp
83000fe5:	89 e5                	mov    %esp,%ebp
83000fe7:	57                   	push   %edi
83000fe8:	56                   	push   %esi
83000fe9:	53                   	push   %ebx
83000fea:	83 ec 1c             	sub    $0x1c,%esp
83000fed:	a1 cc 17 00 83       	mov    0x830017cc,%eax
83000ff2:	8b 98 48 01 00 00    	mov    0x148(%eax),%ebx
83000ff8:	a1 cc 17 00 83       	mov    0x830017cc,%eax
83000ffd:	05 48 01 00 00       	add    $0x148,%eax
83001002:	89 45 e4             	mov    %eax,-0x1c(%ebp)
83001005:	90                   	nop
83001006:	85 db                	test   %ebx,%ebx
83001008:	0f 84 e1 00 00 00    	je     830010ef <__call_exitprocs+0x10b>
8300100e:	8d bb 88 00 00 00    	lea    0x88(%ebx),%edi
83001014:	8b 43 04             	mov    0x4(%ebx),%eax
83001017:	8d 70 ff             	lea    -0x1(%eax),%esi
8300101a:	e9 c6 00 00 00       	jmp    830010e5 <__call_exitprocs+0x101>
8300101f:	b8 01 00 00 00       	mov    $0x1,%eax
83001024:	89 f1                	mov    %esi,%ecx
83001026:	d3 e0                	shl    %cl,%eax
83001028:	89 45 e0             	mov    %eax,-0x20(%ebp)
8300102b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
8300102f:	74 17                	je     83001048 <__call_exitprocs+0x64>
83001031:	85 ff                	test   %edi,%edi
83001033:	0f 84 a5 00 00 00    	je     830010de <__call_exitprocs+0xfa>
83001039:	8d 46 20             	lea    0x20(%esi),%eax
8300103c:	8b 04 87             	mov    (%edi,%eax,4),%eax
8300103f:	39 45 0c             	cmp    %eax,0xc(%ebp)
83001042:	0f 85 96 00 00 00    	jne    830010de <__call_exitprocs+0xfa>
83001048:	8b 44 b3 08          	mov    0x8(%ebx,%esi,4),%eax
8300104c:	89 45 dc             	mov    %eax,-0x24(%ebp)
8300104f:	8b 43 04             	mov    0x4(%ebx),%eax
83001052:	83 e8 01             	sub    $0x1,%eax
83001055:	39 c6                	cmp    %eax,%esi
83001057:	75 0b                	jne    83001064 <__call_exitprocs+0x80>
83001059:	8b 43 04             	mov    0x4(%ebx),%eax
8300105c:	83 e8 01             	sub    $0x1,%eax
8300105f:	89 43 04             	mov    %eax,0x4(%ebx)
83001062:	eb 08                	jmp    8300106c <__call_exitprocs+0x88>
83001064:	c7 44 b3 08 00 00 00 	movl   $0x0,0x8(%ebx,%esi,4)
8300106b:	00 
8300106c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
83001070:	74 6f                	je     830010e1 <__call_exitprocs+0xfd>
83001072:	8b 43 04             	mov    0x4(%ebx),%eax
83001075:	89 45 d8             	mov    %eax,-0x28(%ebp)
83001078:	85 ff                	test   %edi,%edi
8300107a:	74 0f                	je     8300108b <__call_exitprocs+0xa7>
8300107c:	8b 97 00 01 00 00    	mov    0x100(%edi),%edx
83001082:	8b 45 e0             	mov    -0x20(%ebp),%eax
83001085:	21 d0                	and    %edx,%eax
83001087:	85 c0                	test   %eax,%eax
83001089:	75 07                	jne    83001092 <__call_exitprocs+0xae>
8300108b:	8b 45 dc             	mov    -0x24(%ebp),%eax
8300108e:	ff d0                	call   *%eax
83001090:	eb 32                	jmp    830010c4 <__call_exitprocs+0xe0>
83001092:	8b 97 04 01 00 00    	mov    0x104(%edi),%edx
83001098:	8b 45 e0             	mov    -0x20(%ebp),%eax
8300109b:	21 d0                	and    %edx,%eax
8300109d:	85 c0                	test   %eax,%eax
8300109f:	75 14                	jne    830010b5 <__call_exitprocs+0xd1>
830010a1:	8b 04 b7             	mov    (%edi,%esi,4),%eax
830010a4:	83 ec 08             	sub    $0x8,%esp
830010a7:	50                   	push   %eax
830010a8:	ff 75 08             	pushl  0x8(%ebp)
830010ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
830010ae:	ff d0                	call   *%eax
830010b0:	83 c4 10             	add    $0x10,%esp
830010b3:	eb 0f                	jmp    830010c4 <__call_exitprocs+0xe0>
830010b5:	8b 04 b7             	mov    (%edi,%esi,4),%eax
830010b8:	83 ec 0c             	sub    $0xc,%esp
830010bb:	50                   	push   %eax
830010bc:	8b 45 dc             	mov    -0x24(%ebp),%eax
830010bf:	ff d0                	call   *%eax
830010c1:	83 c4 10             	add    $0x10,%esp
830010c4:	8b 43 04             	mov    0x4(%ebx),%eax
830010c7:	39 45 d8             	cmp    %eax,-0x28(%ebp)
830010ca:	0f 85 1d ff ff ff    	jne    83000fed <__call_exitprocs+0x9>
830010d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
830010d3:	8b 00                	mov    (%eax),%eax
830010d5:	39 c3                	cmp    %eax,%ebx
830010d7:	74 09                	je     830010e2 <__call_exitprocs+0xfe>
830010d9:	e9 0f ff ff ff       	jmp    83000fed <__call_exitprocs+0x9>
830010de:	90                   	nop
830010df:	eb 01                	jmp    830010e2 <__call_exitprocs+0xfe>
830010e1:	90                   	nop
830010e2:	83 ee 01             	sub    $0x1,%esi
830010e5:	85 f6                	test   %esi,%esi
830010e7:	0f 89 32 ff ff ff    	jns    8300101f <__call_exitprocs+0x3b>
830010ed:	eb 01                	jmp    830010f0 <__call_exitprocs+0x10c>
830010ef:	90                   	nop
830010f0:	90                   	nop
830010f1:	8d 65 f4             	lea    -0xc(%ebp),%esp
830010f4:	5b                   	pop    %ebx
830010f5:	5e                   	pop    %esi
830010f6:	5f                   	pop    %edi
830010f7:	5d                   	pop    %ebp
830010f8:	c3                   	ret    

830010f9 <_free_r>:
830010f9:	55                   	push   %ebp
830010fa:	89 e5                	mov    %esp,%ebp
830010fc:	53                   	push   %ebx
830010fd:	83 ec 34             	sub    $0x34,%esp
83001100:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
83001104:	0f 84 c4 03 00 00    	je     830014ce <_free_r+0x3d5>
8300110a:	83 ec 0c             	sub    $0xc,%esp
8300110d:	ff 75 08             	pushl  0x8(%ebp)
83001110:	e8 83 fe ff ff       	call   83000f98 <__malloc_lock>
83001115:	83 c4 10             	add    $0x10,%esp
83001118:	8b 45 0c             	mov    0xc(%ebp),%eax
8300111b:	83 e8 08             	sub    $0x8,%eax
8300111e:	89 45 f4             	mov    %eax,-0xc(%ebp)
83001121:	8b 45 f4             	mov    -0xc(%ebp),%eax
83001124:	8b 40 04             	mov    0x4(%eax),%eax
83001127:	89 45 e0             	mov    %eax,-0x20(%ebp)
8300112a:	8b 45 e0             	mov    -0x20(%ebp),%eax
8300112d:	83 e0 fe             	and    $0xfffffffe,%eax
83001130:	89 45 f0             	mov    %eax,-0x10(%ebp)
83001133:	8b 55 f4             	mov    -0xc(%ebp),%edx
83001136:	8b 45 f0             	mov    -0x10(%ebp),%eax
83001139:	01 d0                	add    %edx,%eax
8300113b:	89 45 dc             	mov    %eax,-0x24(%ebp)
8300113e:	8b 45 dc             	mov    -0x24(%ebp),%eax
83001141:	8b 40 04             	mov    0x4(%eax),%eax
83001144:	83 e0 fc             	and    $0xfffffffc,%eax
83001147:	89 45 d8             	mov    %eax,-0x28(%ebp)
8300114a:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
8300114f:	8b 40 08             	mov    0x8(%eax),%eax
83001152:	39 45 dc             	cmp    %eax,-0x24(%ebp)
83001155:	0f 85 94 00 00 00    	jne    830011ef <_free_r+0xf6>
8300115b:	8b 45 d8             	mov    -0x28(%ebp),%eax
8300115e:	01 45 f0             	add    %eax,-0x10(%ebp)
83001161:	8b 45 e0             	mov    -0x20(%ebp),%eax
83001164:	83 e0 01             	and    $0x1,%eax
83001167:	85 c0                	test   %eax,%eax
83001169:	75 3a                	jne    830011a5 <_free_r+0xac>
8300116b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8300116e:	8b 00                	mov    (%eax),%eax
83001170:	89 45 d4             	mov    %eax,-0x2c(%ebp)
83001173:	8b 45 d4             	mov    -0x2c(%ebp),%eax
83001176:	f7 d8                	neg    %eax
83001178:	01 45 f4             	add    %eax,-0xc(%ebp)
8300117b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8300117e:	01 45 f0             	add    %eax,-0x10(%ebp)
83001181:	8b 45 f4             	mov    -0xc(%ebp),%eax
83001184:	8b 40 0c             	mov    0xc(%eax),%eax
83001187:	89 45 ec             	mov    %eax,-0x14(%ebp)
8300118a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8300118d:	8b 40 08             	mov    0x8(%eax),%eax
83001190:	89 45 e8             	mov    %eax,-0x18(%ebp)
83001193:	8b 45 e8             	mov    -0x18(%ebp),%eax
83001196:	8b 55 ec             	mov    -0x14(%ebp),%edx
83001199:	89 50 0c             	mov    %edx,0xc(%eax)
8300119c:	8b 45 ec             	mov    -0x14(%ebp),%eax
8300119f:	8b 55 e8             	mov    -0x18(%ebp),%edx
830011a2:	89 50 08             	mov    %edx,0x8(%eax)
830011a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
830011a8:	83 c8 01             	or     $0x1,%eax
830011ab:	89 c2                	mov    %eax,%edx
830011ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
830011b0:	89 50 04             	mov    %edx,0x4(%eax)
830011b3:	ba 20 1c 00 83       	mov    $0x83001c20,%edx
830011b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
830011bb:	89 42 08             	mov    %eax,0x8(%edx)
830011be:	a1 28 20 00 83       	mov    0x83002028,%eax
830011c3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
830011c6:	72 14                	jb     830011dc <_free_r+0xe3>
830011c8:	a1 40 20 00 83       	mov    0x83002040,%eax
830011cd:	83 ec 08             	sub    $0x8,%esp
830011d0:	50                   	push   %eax
830011d1:	ff 75 08             	pushl  0x8(%ebp)
830011d4:	e8 fb 02 00 00       	call   830014d4 <_malloc_trim_r>
830011d9:	83 c4 10             	add    $0x10,%esp
830011dc:	83 ec 0c             	sub    $0xc,%esp
830011df:	ff 75 08             	pushl  0x8(%ebp)
830011e2:	e8 b7 fd ff ff       	call   83000f9e <__malloc_unlock>
830011e7:	83 c4 10             	add    $0x10,%esp
830011ea:	e9 e0 02 00 00       	jmp    830014cf <_free_r+0x3d6>
830011ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
830011f2:	8b 55 d8             	mov    -0x28(%ebp),%edx
830011f5:	89 50 04             	mov    %edx,0x4(%eax)
830011f8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
830011ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
83001202:	83 e0 01             	and    $0x1,%eax
83001205:	85 c0                	test   %eax,%eax
83001207:	75 52                	jne    8300125b <_free_r+0x162>
83001209:	8b 45 f4             	mov    -0xc(%ebp),%eax
8300120c:	8b 00                	mov    (%eax),%eax
8300120e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
83001211:	8b 45 d4             	mov    -0x2c(%ebp),%eax
83001214:	f7 d8                	neg    %eax
83001216:	01 45 f4             	add    %eax,-0xc(%ebp)
83001219:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8300121c:	01 45 f0             	add    %eax,-0x10(%ebp)
8300121f:	8b 45 f4             	mov    -0xc(%ebp),%eax
83001222:	8b 40 08             	mov    0x8(%eax),%eax
83001225:	ba 28 1c 00 83       	mov    $0x83001c28,%edx
8300122a:	39 d0                	cmp    %edx,%eax
8300122c:	75 09                	jne    83001237 <_free_r+0x13e>
8300122e:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
83001235:	eb 24                	jmp    8300125b <_free_r+0x162>
83001237:	8b 45 f4             	mov    -0xc(%ebp),%eax
8300123a:	8b 40 0c             	mov    0xc(%eax),%eax
8300123d:	89 45 ec             	mov    %eax,-0x14(%ebp)
83001240:	8b 45 f4             	mov    -0xc(%ebp),%eax
83001243:	8b 40 08             	mov    0x8(%eax),%eax
83001246:	89 45 e8             	mov    %eax,-0x18(%ebp)
83001249:	8b 45 e8             	mov    -0x18(%ebp),%eax
8300124c:	8b 55 ec             	mov    -0x14(%ebp),%edx
8300124f:	89 50 0c             	mov    %edx,0xc(%eax)
83001252:	8b 45 ec             	mov    -0x14(%ebp),%eax
83001255:	8b 55 e8             	mov    -0x18(%ebp),%edx
83001258:	89 50 08             	mov    %edx,0x8(%eax)
8300125b:	8b 55 dc             	mov    -0x24(%ebp),%edx
8300125e:	8b 45 d8             	mov    -0x28(%ebp),%eax
83001261:	01 d0                	add    %edx,%eax
83001263:	8b 40 04             	mov    0x4(%eax),%eax
83001266:	83 e0 01             	and    $0x1,%eax
83001269:	85 c0                	test   %eax,%eax
8300126b:	75 75                	jne    830012e2 <_free_r+0x1e9>
8300126d:	8b 45 d8             	mov    -0x28(%ebp),%eax
83001270:	01 45 f0             	add    %eax,-0x10(%ebp)
83001273:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
83001277:	75 45                	jne    830012be <_free_r+0x1c5>
83001279:	8b 45 dc             	mov    -0x24(%ebp),%eax
8300127c:	8b 40 08             	mov    0x8(%eax),%eax
8300127f:	ba 28 1c 00 83       	mov    $0x83001c28,%edx
83001284:	39 d0                	cmp    %edx,%eax
83001286:	75 36                	jne    830012be <_free_r+0x1c5>
83001288:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
8300128f:	b8 28 1c 00 83       	mov    $0x83001c28,%eax
83001294:	8b 55 f4             	mov    -0xc(%ebp),%edx
83001297:	89 50 0c             	mov    %edx,0xc(%eax)
8300129a:	ba 28 1c 00 83       	mov    $0x83001c28,%edx
8300129f:	8b 40 0c             	mov    0xc(%eax),%eax
830012a2:	89 42 08             	mov    %eax,0x8(%edx)
830012a5:	ba 28 1c 00 83       	mov    $0x83001c28,%edx
830012aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
830012ad:	89 50 0c             	mov    %edx,0xc(%eax)
830012b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
830012b3:	8b 50 0c             	mov    0xc(%eax),%edx
830012b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
830012b9:	89 50 08             	mov    %edx,0x8(%eax)
830012bc:	eb 24                	jmp    830012e2 <_free_r+0x1e9>
830012be:	8b 45 dc             	mov    -0x24(%ebp),%eax
830012c1:	8b 40 0c             	mov    0xc(%eax),%eax
830012c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
830012c7:	8b 45 dc             	mov    -0x24(%ebp),%eax
830012ca:	8b 40 08             	mov    0x8(%eax),%eax
830012cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
830012d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
830012d3:	8b 55 ec             	mov    -0x14(%ebp),%edx
830012d6:	89 50 0c             	mov    %edx,0xc(%eax)
830012d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
830012dc:	8b 55 e8             	mov    -0x18(%ebp),%edx
830012df:	89 50 08             	mov    %edx,0x8(%eax)
830012e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
830012e5:	83 c8 01             	or     $0x1,%eax
830012e8:	89 c2                	mov    %eax,%edx
830012ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
830012ed:	89 50 04             	mov    %edx,0x4(%eax)
830012f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
830012f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
830012f6:	01 c2                	add    %eax,%edx
830012f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
830012fb:	89 02                	mov    %eax,(%edx)
830012fd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
83001301:	0f 85 b7 01 00 00    	jne    830014be <_free_r+0x3c5>
83001307:	81 7d f0 ff 01 00 00 	cmpl   $0x1ff,-0x10(%ebp)
8300130e:	77 7f                	ja     8300138f <_free_r+0x296>
83001310:	8b 45 f0             	mov    -0x10(%ebp),%eax
83001313:	c1 e8 03             	shr    $0x3,%eax
83001316:	89 45 d0             	mov    %eax,-0x30(%ebp)
83001319:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
8300131e:	8b 58 04             	mov    0x4(%eax),%ebx
83001321:	8b 45 d0             	mov    -0x30(%ebp),%eax
83001324:	8d 50 03             	lea    0x3(%eax),%edx
83001327:	85 c0                	test   %eax,%eax
83001329:	0f 48 c2             	cmovs  %edx,%eax
8300132c:	c1 f8 02             	sar    $0x2,%eax
8300132f:	ba 01 00 00 00       	mov    $0x1,%edx
83001334:	89 c1                	mov    %eax,%ecx
83001336:	d3 e2                	shl    %cl,%edx
83001338:	89 d0                	mov    %edx,%eax
8300133a:	ba 20 1c 00 83       	mov    $0x83001c20,%edx
8300133f:	09 d8                	or     %ebx,%eax
83001341:	89 42 04             	mov    %eax,0x4(%edx)
83001344:	8b 45 d0             	mov    -0x30(%ebp),%eax
83001347:	83 c0 01             	add    $0x1,%eax
8300134a:	01 c0                	add    %eax,%eax
8300134c:	c1 e0 02             	shl    $0x2,%eax
8300134f:	05 20 1c 00 83       	add    $0x83001c20,%eax
83001354:	83 e8 08             	sub    $0x8,%eax
83001357:	89 45 ec             	mov    %eax,-0x14(%ebp)
8300135a:	8b 45 ec             	mov    -0x14(%ebp),%eax
8300135d:	8b 40 08             	mov    0x8(%eax),%eax
83001360:	89 45 e8             	mov    %eax,-0x18(%ebp)
83001363:	8b 45 f4             	mov    -0xc(%ebp),%eax
83001366:	8b 55 ec             	mov    -0x14(%ebp),%edx
83001369:	89 50 0c             	mov    %edx,0xc(%eax)
8300136c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8300136f:	8b 55 e8             	mov    -0x18(%ebp),%edx
83001372:	89 50 08             	mov    %edx,0x8(%eax)
83001375:	8b 45 ec             	mov    -0x14(%ebp),%eax
83001378:	8b 55 f4             	mov    -0xc(%ebp),%edx
8300137b:	89 50 08             	mov    %edx,0x8(%eax)
8300137e:	8b 45 ec             	mov    -0x14(%ebp),%eax
83001381:	8b 50 08             	mov    0x8(%eax),%edx
83001384:	8b 45 e8             	mov    -0x18(%ebp),%eax
83001387:	89 50 0c             	mov    %edx,0xc(%eax)
8300138a:	e9 2f 01 00 00       	jmp    830014be <_free_r+0x3c5>
8300138f:	8b 45 f0             	mov    -0x10(%ebp),%eax
83001392:	c1 e8 09             	shr    $0x9,%eax
83001395:	85 c0                	test   %eax,%eax
83001397:	75 08                	jne    830013a1 <_free_r+0x2a8>
83001399:	8b 45 f0             	mov    -0x10(%ebp),%eax
8300139c:	c1 e8 03             	shr    $0x3,%eax
8300139f:	eb 77                	jmp    83001418 <_free_r+0x31f>
830013a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
830013a4:	c1 e8 09             	shr    $0x9,%eax
830013a7:	83 f8 04             	cmp    $0x4,%eax
830013aa:	77 0b                	ja     830013b7 <_free_r+0x2be>
830013ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
830013af:	c1 e8 06             	shr    $0x6,%eax
830013b2:	83 c0 38             	add    $0x38,%eax
830013b5:	eb 61                	jmp    83001418 <_free_r+0x31f>
830013b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
830013ba:	c1 e8 09             	shr    $0x9,%eax
830013bd:	83 f8 14             	cmp    $0x14,%eax
830013c0:	77 0b                	ja     830013cd <_free_r+0x2d4>
830013c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
830013c5:	c1 e8 09             	shr    $0x9,%eax
830013c8:	83 c0 5b             	add    $0x5b,%eax
830013cb:	eb 4b                	jmp    83001418 <_free_r+0x31f>
830013cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
830013d0:	c1 e8 09             	shr    $0x9,%eax
830013d3:	83 f8 54             	cmp    $0x54,%eax
830013d6:	77 0b                	ja     830013e3 <_free_r+0x2ea>
830013d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
830013db:	c1 e8 0c             	shr    $0xc,%eax
830013de:	83 c0 6e             	add    $0x6e,%eax
830013e1:	eb 35                	jmp    83001418 <_free_r+0x31f>
830013e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
830013e6:	c1 e8 09             	shr    $0x9,%eax
830013e9:	3d 54 01 00 00       	cmp    $0x154,%eax
830013ee:	77 0b                	ja     830013fb <_free_r+0x302>
830013f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
830013f3:	c1 e8 0f             	shr    $0xf,%eax
830013f6:	83 c0 77             	add    $0x77,%eax
830013f9:	eb 1d                	jmp    83001418 <_free_r+0x31f>
830013fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
830013fe:	c1 e8 09             	shr    $0x9,%eax
83001401:	3d 54 05 00 00       	cmp    $0x554,%eax
83001406:	77 0b                	ja     83001413 <_free_r+0x31a>
83001408:	8b 45 f0             	mov    -0x10(%ebp),%eax
8300140b:	c1 e8 12             	shr    $0x12,%eax
8300140e:	83 c0 7c             	add    $0x7c,%eax
83001411:	eb 05                	jmp    83001418 <_free_r+0x31f>
83001413:	b8 7e 00 00 00       	mov    $0x7e,%eax
83001418:	89 45 d0             	mov    %eax,-0x30(%ebp)
8300141b:	8b 45 d0             	mov    -0x30(%ebp),%eax
8300141e:	83 c0 01             	add    $0x1,%eax
83001421:	01 c0                	add    %eax,%eax
83001423:	c1 e0 02             	shl    $0x2,%eax
83001426:	05 20 1c 00 83       	add    $0x83001c20,%eax
8300142b:	83 e8 08             	sub    $0x8,%eax
8300142e:	89 45 ec             	mov    %eax,-0x14(%ebp)
83001431:	8b 45 ec             	mov    -0x14(%ebp),%eax
83001434:	8b 40 08             	mov    0x8(%eax),%eax
83001437:	89 45 e8             	mov    %eax,-0x18(%ebp)
8300143a:	8b 45 e8             	mov    -0x18(%ebp),%eax
8300143d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
83001440:	75 36                	jne    83001478 <_free_r+0x37f>
83001442:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
83001447:	8b 58 04             	mov    0x4(%eax),%ebx
8300144a:	8b 45 d0             	mov    -0x30(%ebp),%eax
8300144d:	8d 50 03             	lea    0x3(%eax),%edx
83001450:	85 c0                	test   %eax,%eax
83001452:	0f 48 c2             	cmovs  %edx,%eax
83001455:	c1 f8 02             	sar    $0x2,%eax
83001458:	ba 01 00 00 00       	mov    $0x1,%edx
8300145d:	89 c1                	mov    %eax,%ecx
8300145f:	d3 e2                	shl    %cl,%edx
83001461:	89 d0                	mov    %edx,%eax
83001463:	ba 20 1c 00 83       	mov    $0x83001c20,%edx
83001468:	09 d8                	or     %ebx,%eax
8300146a:	89 42 04             	mov    %eax,0x4(%edx)
8300146d:	eb 28                	jmp    83001497 <_free_r+0x39e>
8300146f:	8b 45 e8             	mov    -0x18(%ebp),%eax
83001472:	8b 40 08             	mov    0x8(%eax),%eax
83001475:	89 45 e8             	mov    %eax,-0x18(%ebp)
83001478:	8b 45 e8             	mov    -0x18(%ebp),%eax
8300147b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
8300147e:	74 0e                	je     8300148e <_free_r+0x395>
83001480:	8b 45 e8             	mov    -0x18(%ebp),%eax
83001483:	8b 40 04             	mov    0x4(%eax),%eax
83001486:	83 e0 fc             	and    $0xfffffffc,%eax
83001489:	39 45 f0             	cmp    %eax,-0x10(%ebp)
8300148c:	72 e1                	jb     8300146f <_free_r+0x376>
8300148e:	8b 45 e8             	mov    -0x18(%ebp),%eax
83001491:	8b 40 0c             	mov    0xc(%eax),%eax
83001494:	89 45 ec             	mov    %eax,-0x14(%ebp)
83001497:	8b 45 f4             	mov    -0xc(%ebp),%eax
8300149a:	8b 55 ec             	mov    -0x14(%ebp),%edx
8300149d:	89 50 0c             	mov    %edx,0xc(%eax)
830014a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
830014a3:	8b 55 e8             	mov    -0x18(%ebp),%edx
830014a6:	89 50 08             	mov    %edx,0x8(%eax)
830014a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
830014ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
830014af:	89 50 08             	mov    %edx,0x8(%eax)
830014b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
830014b5:	8b 50 08             	mov    0x8(%eax),%edx
830014b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
830014bb:	89 50 0c             	mov    %edx,0xc(%eax)
830014be:	83 ec 0c             	sub    $0xc,%esp
830014c1:	ff 75 08             	pushl  0x8(%ebp)
830014c4:	e8 d5 fa ff ff       	call   83000f9e <__malloc_unlock>
830014c9:	83 c4 10             	add    $0x10,%esp
830014cc:	eb 01                	jmp    830014cf <_free_r+0x3d6>
830014ce:	90                   	nop
830014cf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
830014d2:	c9                   	leave  
830014d3:	c3                   	ret    

830014d4 <_malloc_trim_r>:
830014d4:	55                   	push   %ebp
830014d5:	89 e5                	mov    %esp,%ebp
830014d7:	83 ec 28             	sub    $0x28,%esp
830014da:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
830014e1:	83 ec 0c             	sub    $0xc,%esp
830014e4:	ff 75 08             	pushl  0x8(%ebp)
830014e7:	e8 ac fa ff ff       	call   83000f98 <__malloc_lock>
830014ec:	83 c4 10             	add    $0x10,%esp
830014ef:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
830014f4:	8b 40 08             	mov    0x8(%eax),%eax
830014f7:	8b 40 04             	mov    0x4(%eax),%eax
830014fa:	83 e0 fc             	and    $0xfffffffc,%eax
830014fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
83001500:	8b 45 f0             	mov    -0x10(%ebp),%eax
83001503:	2b 45 0c             	sub    0xc(%ebp),%eax
83001506:	89 c2                	mov    %eax,%edx
83001508:	8b 45 f4             	mov    -0xc(%ebp),%eax
8300150b:	01 d0                	add    %edx,%eax
8300150d:	83 e8 11             	sub    $0x11,%eax
83001510:	ba 00 00 00 00       	mov    $0x0,%edx
83001515:	f7 75 f4             	divl   -0xc(%ebp)
83001518:	83 e8 01             	sub    $0x1,%eax
8300151b:	0f af 45 f4          	imul   -0xc(%ebp),%eax
8300151f:	89 45 ec             	mov    %eax,-0x14(%ebp)
83001522:	8b 45 f4             	mov    -0xc(%ebp),%eax
83001525:	39 45 ec             	cmp    %eax,-0x14(%ebp)
83001528:	7d 18                	jge    83001542 <_malloc_trim_r+0x6e>
8300152a:	83 ec 0c             	sub    $0xc,%esp
8300152d:	ff 75 08             	pushl  0x8(%ebp)
83001530:	e8 69 fa ff ff       	call   83000f9e <__malloc_unlock>
83001535:	83 c4 10             	add    $0x10,%esp
83001538:	b8 00 00 00 00       	mov    $0x0,%eax
8300153d:	e9 f1 00 00 00       	jmp    83001633 <_malloc_trim_r+0x15f>
83001542:	83 ec 08             	sub    $0x8,%esp
83001545:	6a 00                	push   $0x0
83001547:	ff 75 08             	pushl  0x8(%ebp)
8300154a:	e8 55 fa ff ff       	call   83000fa4 <_sbrk_r>
8300154f:	83 c4 10             	add    $0x10,%esp
83001552:	89 45 e8             	mov    %eax,-0x18(%ebp)
83001555:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
8300155a:	8b 50 08             	mov    0x8(%eax),%edx
8300155d:	8b 45 f0             	mov    -0x10(%ebp),%eax
83001560:	01 d0                	add    %edx,%eax
83001562:	39 45 e8             	cmp    %eax,-0x18(%ebp)
83001565:	74 18                	je     8300157f <_malloc_trim_r+0xab>
83001567:	83 ec 0c             	sub    $0xc,%esp
8300156a:	ff 75 08             	pushl  0x8(%ebp)
8300156d:	e8 2c fa ff ff       	call   83000f9e <__malloc_unlock>
83001572:	83 c4 10             	add    $0x10,%esp
83001575:	b8 00 00 00 00       	mov    $0x0,%eax
8300157a:	e9 b4 00 00 00       	jmp    83001633 <_malloc_trim_r+0x15f>
8300157f:	8b 45 ec             	mov    -0x14(%ebp),%eax
83001582:	f7 d8                	neg    %eax
83001584:	83 ec 08             	sub    $0x8,%esp
83001587:	50                   	push   %eax
83001588:	ff 75 08             	pushl  0x8(%ebp)
8300158b:	e8 14 fa ff ff       	call   83000fa4 <_sbrk_r>
83001590:	83 c4 10             	add    $0x10,%esp
83001593:	89 45 e4             	mov    %eax,-0x1c(%ebp)
83001596:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
8300159a:	75 61                	jne    830015fd <_malloc_trim_r+0x129>
8300159c:	83 ec 08             	sub    $0x8,%esp
8300159f:	6a 00                	push   $0x0
830015a1:	ff 75 08             	pushl  0x8(%ebp)
830015a4:	e8 fb f9 ff ff       	call   83000fa4 <_sbrk_r>
830015a9:	83 c4 10             	add    $0x10,%esp
830015ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
830015af:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
830015b4:	8b 50 08             	mov    0x8(%eax),%edx
830015b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
830015ba:	29 d0                	sub    %edx,%eax
830015bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
830015bf:	83 7d f0 0f          	cmpl   $0xf,-0x10(%ebp)
830015c3:	7e 23                	jle    830015e8 <_malloc_trim_r+0x114>
830015c5:	8b 15 2c 20 00 83    	mov    0x8300202c,%edx
830015cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
830015ce:	29 d0                	sub    %edx,%eax
830015d0:	a3 60 20 00 83       	mov    %eax,0x83002060
830015d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
830015d8:	83 c8 01             	or     $0x1,%eax
830015db:	89 c2                	mov    %eax,%edx
830015dd:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
830015e2:	8b 40 08             	mov    0x8(%eax),%eax
830015e5:	89 50 04             	mov    %edx,0x4(%eax)
830015e8:	83 ec 0c             	sub    $0xc,%esp
830015eb:	ff 75 08             	pushl  0x8(%ebp)
830015ee:	e8 ab f9 ff ff       	call   83000f9e <__malloc_unlock>
830015f3:	83 c4 10             	add    $0x10,%esp
830015f6:	b8 00 00 00 00       	mov    $0x0,%eax
830015fb:	eb 36                	jmp    83001633 <_malloc_trim_r+0x15f>
830015fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
83001600:	2b 45 ec             	sub    -0x14(%ebp),%eax
83001603:	83 c8 01             	or     $0x1,%eax
83001606:	89 c2                	mov    %eax,%edx
83001608:	b8 20 1c 00 83       	mov    $0x83001c20,%eax
8300160d:	8b 40 08             	mov    0x8(%eax),%eax
83001610:	89 50 04             	mov    %edx,0x4(%eax)
83001613:	a1 60 20 00 83       	mov    0x83002060,%eax
83001618:	2b 45 ec             	sub    -0x14(%ebp),%eax
8300161b:	a3 60 20 00 83       	mov    %eax,0x83002060
83001620:	83 ec 0c             	sub    $0xc,%esp
83001623:	ff 75 08             	pushl  0x8(%ebp)
83001626:	e8 73 f9 ff ff       	call   83000f9e <__malloc_unlock>
8300162b:	83 c4 10             	add    $0x10,%esp
8300162e:	b8 01 00 00 00       	mov    $0x1,%eax
83001633:	c9                   	leave  
83001634:	c3                   	ret    

83001635 <cleanup_glue>:
83001635:	55                   	push   %ebp
83001636:	89 e5                	mov    %esp,%ebp
83001638:	83 ec 08             	sub    $0x8,%esp
8300163b:	8b 45 0c             	mov    0xc(%ebp),%eax
8300163e:	8b 00                	mov    (%eax),%eax
83001640:	85 c0                	test   %eax,%eax
83001642:	74 14                	je     83001658 <cleanup_glue+0x23>
83001644:	8b 45 0c             	mov    0xc(%ebp),%eax
83001647:	8b 00                	mov    (%eax),%eax
83001649:	83 ec 08             	sub    $0x8,%esp
8300164c:	50                   	push   %eax
8300164d:	ff 75 08             	pushl  0x8(%ebp)
83001650:	e8 e0 ff ff ff       	call   83001635 <cleanup_glue>
83001655:	83 c4 10             	add    $0x10,%esp
83001658:	83 ec 08             	sub    $0x8,%esp
8300165b:	ff 75 0c             	pushl  0xc(%ebp)
8300165e:	ff 75 08             	pushl  0x8(%ebp)
83001661:	e8 93 fa ff ff       	call   830010f9 <_free_r>
83001666:	83 c4 10             	add    $0x10,%esp
83001669:	90                   	nop
8300166a:	c9                   	leave  
8300166b:	c3                   	ret    

8300166c <_reclaim_reent>:
8300166c:	55                   	push   %ebp
8300166d:	89 e5                	mov    %esp,%ebp
8300166f:	83 ec 28             	sub    $0x28,%esp
83001672:	a1 04 1c 00 83       	mov    0x83001c04,%eax
83001677:	39 45 08             	cmp    %eax,0x8(%ebp)
8300167a:	0f 84 49 01 00 00    	je     830017c9 <_reclaim_reent+0x15d>
83001680:	8b 45 08             	mov    0x8(%ebp),%eax
83001683:	8b 40 4c             	mov    0x4c(%eax),%eax
83001686:	85 c0                	test   %eax,%eax
83001688:	74 64                	je     830016ee <_reclaim_reent+0x82>
8300168a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
83001691:	eb 3e                	jmp    830016d1 <_reclaim_reent+0x65>
83001693:	8b 45 08             	mov    0x8(%ebp),%eax
83001696:	8b 50 4c             	mov    0x4c(%eax),%edx
83001699:	8b 45 f4             	mov    -0xc(%ebp),%eax
8300169c:	c1 e0 02             	shl    $0x2,%eax
8300169f:	01 d0                	add    %edx,%eax
830016a1:	8b 00                	mov    (%eax),%eax
830016a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
830016a6:	eb 1f                	jmp    830016c7 <_reclaim_reent+0x5b>
830016a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
830016ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
830016ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
830016b1:	8b 00                	mov    (%eax),%eax
830016b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
830016b6:	83 ec 08             	sub    $0x8,%esp
830016b9:	ff 75 e8             	pushl  -0x18(%ebp)
830016bc:	ff 75 08             	pushl  0x8(%ebp)
830016bf:	e8 35 fa ff ff       	call   830010f9 <_free_r>
830016c4:	83 c4 10             	add    $0x10,%esp
830016c7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
830016cb:	75 db                	jne    830016a8 <_reclaim_reent+0x3c>
830016cd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
830016d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
830016d4:	83 f8 1f             	cmp    $0x1f,%eax
830016d7:	76 ba                	jbe    83001693 <_reclaim_reent+0x27>
830016d9:	8b 45 08             	mov    0x8(%ebp),%eax
830016dc:	8b 40 4c             	mov    0x4c(%eax),%eax
830016df:	83 ec 08             	sub    $0x8,%esp
830016e2:	50                   	push   %eax
830016e3:	ff 75 08             	pushl  0x8(%ebp)
830016e6:	e8 0e fa ff ff       	call   830010f9 <_free_r>
830016eb:	83 c4 10             	add    $0x10,%esp
830016ee:	8b 45 08             	mov    0x8(%ebp),%eax
830016f1:	8b 40 40             	mov    0x40(%eax),%eax
830016f4:	85 c0                	test   %eax,%eax
830016f6:	74 15                	je     8300170d <_reclaim_reent+0xa1>
830016f8:	8b 45 08             	mov    0x8(%ebp),%eax
830016fb:	8b 40 40             	mov    0x40(%eax),%eax
830016fe:	83 ec 08             	sub    $0x8,%esp
83001701:	50                   	push   %eax
83001702:	ff 75 08             	pushl  0x8(%ebp)
83001705:	e8 ef f9 ff ff       	call   830010f9 <_free_r>
8300170a:	83 c4 10             	add    $0x10,%esp
8300170d:	8b 45 08             	mov    0x8(%ebp),%eax
83001710:	8b 80 48 01 00 00    	mov    0x148(%eax),%eax
83001716:	85 c0                	test   %eax,%eax
83001718:	74 50                	je     8300176a <_reclaim_reent+0xfe>
8300171a:	8b 45 08             	mov    0x8(%ebp),%eax
8300171d:	8b 80 48 01 00 00    	mov    0x148(%eax),%eax
83001723:	8b 55 08             	mov    0x8(%ebp),%edx
83001726:	81 c2 4c 01 00 00    	add    $0x14c,%edx
8300172c:	39 d0                	cmp    %edx,%eax
8300172e:	74 3a                	je     8300176a <_reclaim_reent+0xfe>
83001730:	8b 45 08             	mov    0x8(%ebp),%eax
83001733:	8b 80 48 01 00 00    	mov    0x148(%eax),%eax
83001739:	89 45 ec             	mov    %eax,-0x14(%ebp)
8300173c:	eb 1f                	jmp    8300175d <_reclaim_reent+0xf1>
8300173e:	8b 45 ec             	mov    -0x14(%ebp),%eax
83001741:	89 45 e4             	mov    %eax,-0x1c(%ebp)
83001744:	8b 45 ec             	mov    -0x14(%ebp),%eax
83001747:	8b 00                	mov    (%eax),%eax
83001749:	89 45 ec             	mov    %eax,-0x14(%ebp)
8300174c:	83 ec 08             	sub    $0x8,%esp
8300174f:	ff 75 e4             	pushl  -0x1c(%ebp)
83001752:	ff 75 08             	pushl  0x8(%ebp)
83001755:	e8 9f f9 ff ff       	call   830010f9 <_free_r>
8300175a:	83 c4 10             	add    $0x10,%esp
8300175d:	8b 45 08             	mov    0x8(%ebp),%eax
83001760:	05 4c 01 00 00       	add    $0x14c,%eax
83001765:	39 45 ec             	cmp    %eax,-0x14(%ebp)
83001768:	75 d4                	jne    8300173e <_reclaim_reent+0xd2>
8300176a:	8b 45 08             	mov    0x8(%ebp),%eax
8300176d:	8b 40 54             	mov    0x54(%eax),%eax
83001770:	85 c0                	test   %eax,%eax
83001772:	74 15                	je     83001789 <_reclaim_reent+0x11d>
83001774:	8b 45 08             	mov    0x8(%ebp),%eax
83001777:	8b 40 54             	mov    0x54(%eax),%eax
8300177a:	83 ec 08             	sub    $0x8,%esp
8300177d:	50                   	push   %eax
8300177e:	ff 75 08             	pushl  0x8(%ebp)
83001781:	e8 73 f9 ff ff       	call   830010f9 <_free_r>
83001786:	83 c4 10             	add    $0x10,%esp
83001789:	8b 45 08             	mov    0x8(%ebp),%eax
8300178c:	8b 40 38             	mov    0x38(%eax),%eax
8300178f:	85 c0                	test   %eax,%eax
83001791:	74 36                	je     830017c9 <_reclaim_reent+0x15d>
83001793:	8b 45 08             	mov    0x8(%ebp),%eax
83001796:	8b 40 3c             	mov    0x3c(%eax),%eax
83001799:	83 ec 0c             	sub    $0xc,%esp
8300179c:	ff 75 08             	pushl  0x8(%ebp)
8300179f:	ff d0                	call   *%eax
830017a1:	83 c4 10             	add    $0x10,%esp
830017a4:	8b 45 08             	mov    0x8(%ebp),%eax
830017a7:	8b 80 e0 02 00 00    	mov    0x2e0(%eax),%eax
830017ad:	85 c0                	test   %eax,%eax
830017af:	74 18                	je     830017c9 <_reclaim_reent+0x15d>
830017b1:	8b 45 08             	mov    0x8(%ebp),%eax
830017b4:	8b 80 e0 02 00 00    	mov    0x2e0(%eax),%eax
830017ba:	83 ec 08             	sub    $0x8,%esp
830017bd:	50                   	push   %eax
830017be:	ff 75 08             	pushl  0x8(%ebp)
830017c1:	e8 6f fe ff ff       	call   83001635 <cleanup_glue>
830017c6:	83 c4 10             	add    $0x10,%esp
830017c9:	90                   	nop
830017ca:	c9                   	leave  
830017cb:	c3                   	ret    
